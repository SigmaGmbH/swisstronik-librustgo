// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `ffi.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct AccessListItem {
    // message fields
    pub storageSlot: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    pub address: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccessListItem {
    fn default() -> &'a AccessListItem {
        <AccessListItem as ::protobuf::Message>::default_instance()
    }
}

impl AccessListItem {
    pub fn new() -> AccessListItem {
        ::std::default::Default::default()
    }

    // repeated bytes storageSlot = 1;


    pub fn get_storageSlot(&self) -> &[::std::vec::Vec<u8>] {
        &self.storageSlot
    }
    pub fn clear_storageSlot(&mut self) {
        self.storageSlot.clear();
    }

    // Param is passed by value, moved
    pub fn set_storageSlot(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.storageSlot = v;
    }

    // Mutable pointer to the field.
    pub fn mut_storageSlot(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.storageSlot
    }

    // Take field
    pub fn take_storageSlot(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.storageSlot, ::protobuf::RepeatedField::new())
    }

    // bytes address = 2;


    pub fn get_address(&self) -> &[u8] {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::vec::Vec<u8>) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.address, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for AccessListItem {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.storageSlot)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.storageSlot {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.storageSlot {
            os.write_bytes(1, &v)?;
        };
        if !self.address.is_empty() {
            os.write_bytes(2, &self.address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccessListItem {
        AccessListItem::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "storageSlot",
                |m: &AccessListItem| { &m.storageSlot },
                |m: &mut AccessListItem| { &mut m.storageSlot },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "address",
                |m: &AccessListItem| { &m.address },
                |m: &mut AccessListItem| { &mut m.address },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AccessListItem>(
                "AccessListItem",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AccessListItem {
        static instance: ::protobuf::rt::LazyV2<AccessListItem> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AccessListItem::new)
    }
}

impl ::protobuf::Clear for AccessListItem {
    fn clear(&mut self) {
        self.storageSlot.clear();
        self.address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccessListItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccessListItem {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TransactionData {
    // message fields
    pub from: ::std::vec::Vec<u8>,
    pub to: ::std::vec::Vec<u8>,
    pub data: ::std::vec::Vec<u8>,
    pub gasLimit: u64,
    pub value: ::std::vec::Vec<u8>,
    pub accessList: ::protobuf::RepeatedField<AccessListItem>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TransactionData {
    fn default() -> &'a TransactionData {
        <TransactionData as ::protobuf::Message>::default_instance()
    }
}

impl TransactionData {
    pub fn new() -> TransactionData {
        ::std::default::Default::default()
    }

    // bytes from = 1;


    pub fn get_from(&self) -> &[u8] {
        &self.from
    }
    pub fn clear_from(&mut self) {
        self.from.clear();
    }

    // Param is passed by value, moved
    pub fn set_from(&mut self, v: ::std::vec::Vec<u8>) {
        self.from = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_from(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.from
    }

    // Take field
    pub fn take_from(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.from, ::std::vec::Vec::new())
    }

    // bytes to = 2;


    pub fn get_to(&self) -> &[u8] {
        &self.to
    }
    pub fn clear_to(&mut self) {
        self.to.clear();
    }

    // Param is passed by value, moved
    pub fn set_to(&mut self, v: ::std::vec::Vec<u8>) {
        self.to = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_to(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.to
    }

    // Take field
    pub fn take_to(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.to, ::std::vec::Vec::new())
    }

    // bytes data = 3;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }

    // uint64 gasLimit = 4;


    pub fn get_gasLimit(&self) -> u64 {
        self.gasLimit
    }
    pub fn clear_gasLimit(&mut self) {
        self.gasLimit = 0;
    }

    // Param is passed by value, moved
    pub fn set_gasLimit(&mut self, v: u64) {
        self.gasLimit = v;
    }

    // bytes value = 5;


    pub fn get_value(&self) -> &[u8] {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.value, ::std::vec::Vec::new())
    }

    // repeated .ffi.ffi.AccessListItem accessList = 6;


    pub fn get_accessList(&self) -> &[AccessListItem] {
        &self.accessList
    }
    pub fn clear_accessList(&mut self) {
        self.accessList.clear();
    }

    // Param is passed by value, moved
    pub fn set_accessList(&mut self, v: ::protobuf::RepeatedField<AccessListItem>) {
        self.accessList = v;
    }

    // Mutable pointer to the field.
    pub fn mut_accessList(&mut self) -> &mut ::protobuf::RepeatedField<AccessListItem> {
        &mut self.accessList
    }

    // Take field
    pub fn take_accessList(&mut self) -> ::protobuf::RepeatedField<AccessListItem> {
        ::std::mem::replace(&mut self.accessList, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TransactionData {
    fn is_initialized(&self) -> bool {
        for v in &self.accessList {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.from)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.to)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.gasLimit = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.value)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.accessList)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.from.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.from);
        }
        if !self.to.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.to);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.data);
        }
        if self.gasLimit != 0 {
            my_size += ::protobuf::rt::value_size(4, self.gasLimit, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.value);
        }
        for value in &self.accessList {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.from.is_empty() {
            os.write_bytes(1, &self.from)?;
        }
        if !self.to.is_empty() {
            os.write_bytes(2, &self.to)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(3, &self.data)?;
        }
        if self.gasLimit != 0 {
            os.write_uint64(4, self.gasLimit)?;
        }
        if !self.value.is_empty() {
            os.write_bytes(5, &self.value)?;
        }
        for v in &self.accessList {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TransactionData {
        TransactionData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "from",
                |m: &TransactionData| { &m.from },
                |m: &mut TransactionData| { &mut m.from },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "to",
                |m: &TransactionData| { &m.to },
                |m: &mut TransactionData| { &mut m.to },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "data",
                |m: &TransactionData| { &m.data },
                |m: &mut TransactionData| { &mut m.data },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "gasLimit",
                |m: &TransactionData| { &m.gasLimit },
                |m: &mut TransactionData| { &mut m.gasLimit },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "value",
                |m: &TransactionData| { &m.value },
                |m: &mut TransactionData| { &mut m.value },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AccessListItem>>(
                "accessList",
                |m: &TransactionData| { &m.accessList },
                |m: &mut TransactionData| { &mut m.accessList },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TransactionData>(
                "TransactionData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TransactionData {
        static instance: ::protobuf::rt::LazyV2<TransactionData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TransactionData::new)
    }
}

impl ::protobuf::Clear for TransactionData {
    fn clear(&mut self) {
        self.from.clear();
        self.to.clear();
        self.data.clear();
        self.gasLimit = 0;
        self.value.clear();
        self.accessList.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TransactionData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransactionData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Topic {
    // message fields
    pub inner: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Topic {
    fn default() -> &'a Topic {
        <Topic as ::protobuf::Message>::default_instance()
    }
}

impl Topic {
    pub fn new() -> Topic {
        ::std::default::Default::default()
    }

    // bytes inner = 1;


    pub fn get_inner(&self) -> &[u8] {
        &self.inner
    }
    pub fn clear_inner(&mut self) {
        self.inner.clear();
    }

    // Param is passed by value, moved
    pub fn set_inner(&mut self, v: ::std::vec::Vec<u8>) {
        self.inner = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_inner(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.inner
    }

    // Take field
    pub fn take_inner(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.inner, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Topic {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.inner)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.inner.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.inner);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.inner.is_empty() {
            os.write_bytes(1, &self.inner)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Topic {
        Topic::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "inner",
                |m: &Topic| { &m.inner },
                |m: &mut Topic| { &mut m.inner },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Topic>(
                "Topic",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Topic {
        static instance: ::protobuf::rt::LazyV2<Topic> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Topic::new)
    }
}

impl ::protobuf::Clear for Topic {
    fn clear(&mut self) {
        self.inner.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Topic {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Topic {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Log {
    // message fields
    pub address: ::std::vec::Vec<u8>,
    pub topics: ::protobuf::RepeatedField<Topic>,
    pub data: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Log {
    fn default() -> &'a Log {
        <Log as ::protobuf::Message>::default_instance()
    }
}

impl Log {
    pub fn new() -> Log {
        ::std::default::Default::default()
    }

    // bytes address = 1;


    pub fn get_address(&self) -> &[u8] {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::vec::Vec<u8>) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.address, ::std::vec::Vec::new())
    }

    // repeated .ffi.ffi.Topic topics = 2;


    pub fn get_topics(&self) -> &[Topic] {
        &self.topics
    }
    pub fn clear_topics(&mut self) {
        self.topics.clear();
    }

    // Param is passed by value, moved
    pub fn set_topics(&mut self, v: ::protobuf::RepeatedField<Topic>) {
        self.topics = v;
    }

    // Mutable pointer to the field.
    pub fn mut_topics(&mut self) -> &mut ::protobuf::RepeatedField<Topic> {
        &mut self.topics
    }

    // Take field
    pub fn take_topics(&mut self) -> ::protobuf::RepeatedField<Topic> {
        ::std::mem::replace(&mut self.topics, ::protobuf::RepeatedField::new())
    }

    // bytes data = 3;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Log {
    fn is_initialized(&self) -> bool {
        for v in &self.topics {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.address)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.topics)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.address);
        }
        for value in &self.topics {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.address.is_empty() {
            os.write_bytes(1, &self.address)?;
        }
        for v in &self.topics {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.data.is_empty() {
            os.write_bytes(3, &self.data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Log {
        Log::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "address",
                |m: &Log| { &m.address },
                |m: &mut Log| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Topic>>(
                "topics",
                |m: &Log| { &m.topics },
                |m: &mut Log| { &mut m.topics },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "data",
                |m: &Log| { &m.data },
                |m: &mut Log| { &mut m.data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Log>(
                "Log",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Log {
        static instance: ::protobuf::rt::LazyV2<Log> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Log::new)
    }
}

impl ::protobuf::Clear for Log {
    fn clear(&mut self) {
        self.address.clear();
        self.topics.clear();
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Log {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Log {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HandleTransactionResponse {
    // message fields
    pub logs: ::protobuf::RepeatedField<Log>,
    pub ret: ::std::vec::Vec<u8>,
    pub vm_error: ::std::string::String,
    pub gas_used: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HandleTransactionResponse {
    fn default() -> &'a HandleTransactionResponse {
        <HandleTransactionResponse as ::protobuf::Message>::default_instance()
    }
}

impl HandleTransactionResponse {
    pub fn new() -> HandleTransactionResponse {
        ::std::default::Default::default()
    }

    // repeated .ffi.ffi.Log logs = 2;


    pub fn get_logs(&self) -> &[Log] {
        &self.logs
    }
    pub fn clear_logs(&mut self) {
        self.logs.clear();
    }

    // Param is passed by value, moved
    pub fn set_logs(&mut self, v: ::protobuf::RepeatedField<Log>) {
        self.logs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_logs(&mut self) -> &mut ::protobuf::RepeatedField<Log> {
        &mut self.logs
    }

    // Take field
    pub fn take_logs(&mut self) -> ::protobuf::RepeatedField<Log> {
        ::std::mem::replace(&mut self.logs, ::protobuf::RepeatedField::new())
    }

    // bytes ret = 3;


    pub fn get_ret(&self) -> &[u8] {
        &self.ret
    }
    pub fn clear_ret(&mut self) {
        self.ret.clear();
    }

    // Param is passed by value, moved
    pub fn set_ret(&mut self, v: ::std::vec::Vec<u8>) {
        self.ret = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ret(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.ret
    }

    // Take field
    pub fn take_ret(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.ret, ::std::vec::Vec::new())
    }

    // string vm_error = 4;


    pub fn get_vm_error(&self) -> &str {
        &self.vm_error
    }
    pub fn clear_vm_error(&mut self) {
        self.vm_error.clear();
    }

    // Param is passed by value, moved
    pub fn set_vm_error(&mut self, v: ::std::string::String) {
        self.vm_error = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_vm_error(&mut self) -> &mut ::std::string::String {
        &mut self.vm_error
    }

    // Take field
    pub fn take_vm_error(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.vm_error, ::std::string::String::new())
    }

    // uint64 gas_used = 5;


    pub fn get_gas_used(&self) -> u64 {
        self.gas_used
    }
    pub fn clear_gas_used(&mut self) {
        self.gas_used = 0;
    }

    // Param is passed by value, moved
    pub fn set_gas_used(&mut self, v: u64) {
        self.gas_used = v;
    }
}

impl ::protobuf::Message for HandleTransactionResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.logs {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.logs)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.ret)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.vm_error)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.gas_used = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.logs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.ret.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.ret);
        }
        if !self.vm_error.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.vm_error);
        }
        if self.gas_used != 0 {
            my_size += ::protobuf::rt::value_size(5, self.gas_used, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.logs {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.ret.is_empty() {
            os.write_bytes(3, &self.ret)?;
        }
        if !self.vm_error.is_empty() {
            os.write_string(4, &self.vm_error)?;
        }
        if self.gas_used != 0 {
            os.write_uint64(5, self.gas_used)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HandleTransactionResponse {
        HandleTransactionResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Log>>(
                "logs",
                |m: &HandleTransactionResponse| { &m.logs },
                |m: &mut HandleTransactionResponse| { &mut m.logs },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "ret",
                |m: &HandleTransactionResponse| { &m.ret },
                |m: &mut HandleTransactionResponse| { &mut m.ret },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "vm_error",
                |m: &HandleTransactionResponse| { &m.vm_error },
                |m: &mut HandleTransactionResponse| { &mut m.vm_error },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "gas_used",
                |m: &HandleTransactionResponse| { &m.gas_used },
                |m: &mut HandleTransactionResponse| { &mut m.gas_used },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HandleTransactionResponse>(
                "HandleTransactionResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HandleTransactionResponse {
        static instance: ::protobuf::rt::LazyV2<HandleTransactionResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HandleTransactionResponse::new)
    }
}

impl ::protobuf::Clear for HandleTransactionResponse {
    fn clear(&mut self) {
        self.logs.clear();
        self.ret.clear();
        self.vm_error.clear();
        self.gas_used = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HandleTransactionResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HandleTransactionResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryGetAccount {
    // message fields
    pub address: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryGetAccount {
    fn default() -> &'a QueryGetAccount {
        <QueryGetAccount as ::protobuf::Message>::default_instance()
    }
}

impl QueryGetAccount {
    pub fn new() -> QueryGetAccount {
        ::std::default::Default::default()
    }

    // bytes address = 1;


    pub fn get_address(&self) -> &[u8] {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::vec::Vec<u8>) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.address, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for QueryGetAccount {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.address.is_empty() {
            os.write_bytes(1, &self.address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryGetAccount {
        QueryGetAccount::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "address",
                |m: &QueryGetAccount| { &m.address },
                |m: &mut QueryGetAccount| { &mut m.address },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryGetAccount>(
                "QueryGetAccount",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryGetAccount {
        static instance: ::protobuf::rt::LazyV2<QueryGetAccount> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryGetAccount::new)
    }
}

impl ::protobuf::Clear for QueryGetAccount {
    fn clear(&mut self) {
        self.address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryGetAccount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryGetAccount {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryGetAccountResponse {
    // message fields
    pub balance: ::std::vec::Vec<u8>,
    pub nonce: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryGetAccountResponse {
    fn default() -> &'a QueryGetAccountResponse {
        <QueryGetAccountResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryGetAccountResponse {
    pub fn new() -> QueryGetAccountResponse {
        ::std::default::Default::default()
    }

    // bytes balance = 1;


    pub fn get_balance(&self) -> &[u8] {
        &self.balance
    }
    pub fn clear_balance(&mut self) {
        self.balance.clear();
    }

    // Param is passed by value, moved
    pub fn set_balance(&mut self, v: ::std::vec::Vec<u8>) {
        self.balance = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_balance(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.balance
    }

    // Take field
    pub fn take_balance(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.balance, ::std::vec::Vec::new())
    }

    // bytes nonce = 2;


    pub fn get_nonce(&self) -> &[u8] {
        &self.nonce
    }
    pub fn clear_nonce(&mut self) {
        self.nonce.clear();
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: ::std::vec::Vec<u8>) {
        self.nonce = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nonce(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.nonce
    }

    // Take field
    pub fn take_nonce(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.nonce, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for QueryGetAccountResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.balance)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.nonce)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.balance.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.balance);
        }
        if !self.nonce.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.nonce);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.balance.is_empty() {
            os.write_bytes(1, &self.balance)?;
        }
        if !self.nonce.is_empty() {
            os.write_bytes(2, &self.nonce)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryGetAccountResponse {
        QueryGetAccountResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "balance",
                |m: &QueryGetAccountResponse| { &m.balance },
                |m: &mut QueryGetAccountResponse| { &mut m.balance },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "nonce",
                |m: &QueryGetAccountResponse| { &m.nonce },
                |m: &mut QueryGetAccountResponse| { &mut m.nonce },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryGetAccountResponse>(
                "QueryGetAccountResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryGetAccountResponse {
        static instance: ::protobuf::rt::LazyV2<QueryGetAccountResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryGetAccountResponse::new)
    }
}

impl ::protobuf::Clear for QueryGetAccountResponse {
    fn clear(&mut self) {
        self.balance.clear();
        self.nonce.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryGetAccountResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryGetAccountResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryInsertAccount {
    // message fields
    pub address: ::std::vec::Vec<u8>,
    pub balance: ::std::vec::Vec<u8>,
    pub nonce: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryInsertAccount {
    fn default() -> &'a QueryInsertAccount {
        <QueryInsertAccount as ::protobuf::Message>::default_instance()
    }
}

impl QueryInsertAccount {
    pub fn new() -> QueryInsertAccount {
        ::std::default::Default::default()
    }

    // bytes address = 1;


    pub fn get_address(&self) -> &[u8] {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::vec::Vec<u8>) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.address, ::std::vec::Vec::new())
    }

    // bytes balance = 2;


    pub fn get_balance(&self) -> &[u8] {
        &self.balance
    }
    pub fn clear_balance(&mut self) {
        self.balance.clear();
    }

    // Param is passed by value, moved
    pub fn set_balance(&mut self, v: ::std::vec::Vec<u8>) {
        self.balance = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_balance(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.balance
    }

    // Take field
    pub fn take_balance(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.balance, ::std::vec::Vec::new())
    }

    // bytes nonce = 3;


    pub fn get_nonce(&self) -> &[u8] {
        &self.nonce
    }
    pub fn clear_nonce(&mut self) {
        self.nonce.clear();
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: ::std::vec::Vec<u8>) {
        self.nonce = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nonce(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.nonce
    }

    // Take field
    pub fn take_nonce(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.nonce, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for QueryInsertAccount {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.balance)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.nonce)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.address);
        }
        if !self.balance.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.balance);
        }
        if !self.nonce.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.nonce);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.address.is_empty() {
            os.write_bytes(1, &self.address)?;
        }
        if !self.balance.is_empty() {
            os.write_bytes(2, &self.balance)?;
        }
        if !self.nonce.is_empty() {
            os.write_bytes(3, &self.nonce)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryInsertAccount {
        QueryInsertAccount::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "address",
                |m: &QueryInsertAccount| { &m.address },
                |m: &mut QueryInsertAccount| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "balance",
                |m: &QueryInsertAccount| { &m.balance },
                |m: &mut QueryInsertAccount| { &mut m.balance },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "nonce",
                |m: &QueryInsertAccount| { &m.nonce },
                |m: &mut QueryInsertAccount| { &mut m.nonce },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryInsertAccount>(
                "QueryInsertAccount",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryInsertAccount {
        static instance: ::protobuf::rt::LazyV2<QueryInsertAccount> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryInsertAccount::new)
    }
}

impl ::protobuf::Clear for QueryInsertAccount {
    fn clear(&mut self) {
        self.address.clear();
        self.balance.clear();
        self.nonce.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryInsertAccount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryInsertAccount {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryInsertAccountResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryInsertAccountResponse {
    fn default() -> &'a QueryInsertAccountResponse {
        <QueryInsertAccountResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryInsertAccountResponse {
    pub fn new() -> QueryInsertAccountResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for QueryInsertAccountResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryInsertAccountResponse {
        QueryInsertAccountResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryInsertAccountResponse>(
                "QueryInsertAccountResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryInsertAccountResponse {
        static instance: ::protobuf::rt::LazyV2<QueryInsertAccountResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryInsertAccountResponse::new)
    }
}

impl ::protobuf::Clear for QueryInsertAccountResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryInsertAccountResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryInsertAccountResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryContainsKey {
    // message fields
    pub key: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryContainsKey {
    fn default() -> &'a QueryContainsKey {
        <QueryContainsKey as ::protobuf::Message>::default_instance()
    }
}

impl QueryContainsKey {
    pub fn new() -> QueryContainsKey {
        ::std::default::Default::default()
    }

    // bytes key = 1;


    pub fn get_key(&self) -> &[u8] {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.key, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for QueryContainsKey {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.key.is_empty() {
            os.write_bytes(1, &self.key)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryContainsKey {
        QueryContainsKey::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "key",
                |m: &QueryContainsKey| { &m.key },
                |m: &mut QueryContainsKey| { &mut m.key },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryContainsKey>(
                "QueryContainsKey",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryContainsKey {
        static instance: ::protobuf::rt::LazyV2<QueryContainsKey> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryContainsKey::new)
    }
}

impl ::protobuf::Clear for QueryContainsKey {
    fn clear(&mut self) {
        self.key.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryContainsKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryContainsKey {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryContainsKeyResponse {
    // message fields
    pub contains: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryContainsKeyResponse {
    fn default() -> &'a QueryContainsKeyResponse {
        <QueryContainsKeyResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryContainsKeyResponse {
    pub fn new() -> QueryContainsKeyResponse {
        ::std::default::Default::default()
    }

    // bool contains = 1;


    pub fn get_contains(&self) -> bool {
        self.contains
    }
    pub fn clear_contains(&mut self) {
        self.contains = false;
    }

    // Param is passed by value, moved
    pub fn set_contains(&mut self, v: bool) {
        self.contains = v;
    }
}

impl ::protobuf::Message for QueryContainsKeyResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.contains = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.contains != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.contains != false {
            os.write_bool(1, self.contains)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryContainsKeyResponse {
        QueryContainsKeyResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "contains",
                |m: &QueryContainsKeyResponse| { &m.contains },
                |m: &mut QueryContainsKeyResponse| { &mut m.contains },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryContainsKeyResponse>(
                "QueryContainsKeyResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryContainsKeyResponse {
        static instance: ::protobuf::rt::LazyV2<QueryContainsKeyResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryContainsKeyResponse::new)
    }
}

impl ::protobuf::Clear for QueryContainsKeyResponse {
    fn clear(&mut self) {
        self.contains = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryContainsKeyResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryContainsKeyResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryGetAccountStorageCell {
    // message fields
    pub address: ::std::vec::Vec<u8>,
    pub index: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryGetAccountStorageCell {
    fn default() -> &'a QueryGetAccountStorageCell {
        <QueryGetAccountStorageCell as ::protobuf::Message>::default_instance()
    }
}

impl QueryGetAccountStorageCell {
    pub fn new() -> QueryGetAccountStorageCell {
        ::std::default::Default::default()
    }

    // bytes address = 1;


    pub fn get_address(&self) -> &[u8] {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::vec::Vec<u8>) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.address, ::std::vec::Vec::new())
    }

    // bytes index = 2;


    pub fn get_index(&self) -> &[u8] {
        &self.index
    }
    pub fn clear_index(&mut self) {
        self.index.clear();
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: ::std::vec::Vec<u8>) {
        self.index = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_index(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.index
    }

    // Take field
    pub fn take_index(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.index, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for QueryGetAccountStorageCell {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.index)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.address);
        }
        if !self.index.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.index);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.address.is_empty() {
            os.write_bytes(1, &self.address)?;
        }
        if !self.index.is_empty() {
            os.write_bytes(2, &self.index)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryGetAccountStorageCell {
        QueryGetAccountStorageCell::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "address",
                |m: &QueryGetAccountStorageCell| { &m.address },
                |m: &mut QueryGetAccountStorageCell| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "index",
                |m: &QueryGetAccountStorageCell| { &m.index },
                |m: &mut QueryGetAccountStorageCell| { &mut m.index },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryGetAccountStorageCell>(
                "QueryGetAccountStorageCell",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryGetAccountStorageCell {
        static instance: ::protobuf::rt::LazyV2<QueryGetAccountStorageCell> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryGetAccountStorageCell::new)
    }
}

impl ::protobuf::Clear for QueryGetAccountStorageCell {
    fn clear(&mut self) {
        self.address.clear();
        self.index.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryGetAccountStorageCell {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryGetAccountStorageCell {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryGetAccountStorageCellResponse {
    // message fields
    pub value: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryGetAccountStorageCellResponse {
    fn default() -> &'a QueryGetAccountStorageCellResponse {
        <QueryGetAccountStorageCellResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryGetAccountStorageCellResponse {
    pub fn new() -> QueryGetAccountStorageCellResponse {
        ::std::default::Default::default()
    }

    // bytes value = 1;


    pub fn get_value(&self) -> &[u8] {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.value, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for QueryGetAccountStorageCellResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.value.is_empty() {
            os.write_bytes(1, &self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryGetAccountStorageCellResponse {
        QueryGetAccountStorageCellResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "value",
                |m: &QueryGetAccountStorageCellResponse| { &m.value },
                |m: &mut QueryGetAccountStorageCellResponse| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryGetAccountStorageCellResponse>(
                "QueryGetAccountStorageCellResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryGetAccountStorageCellResponse {
        static instance: ::protobuf::rt::LazyV2<QueryGetAccountStorageCellResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryGetAccountStorageCellResponse::new)
    }
}

impl ::protobuf::Clear for QueryGetAccountStorageCellResponse {
    fn clear(&mut self) {
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryGetAccountStorageCellResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryGetAccountStorageCellResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryGetAccountCode {
    // message fields
    pub address: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryGetAccountCode {
    fn default() -> &'a QueryGetAccountCode {
        <QueryGetAccountCode as ::protobuf::Message>::default_instance()
    }
}

impl QueryGetAccountCode {
    pub fn new() -> QueryGetAccountCode {
        ::std::default::Default::default()
    }

    // bytes address = 1;


    pub fn get_address(&self) -> &[u8] {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::vec::Vec<u8>) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.address, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for QueryGetAccountCode {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.address.is_empty() {
            os.write_bytes(1, &self.address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryGetAccountCode {
        QueryGetAccountCode::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "address",
                |m: &QueryGetAccountCode| { &m.address },
                |m: &mut QueryGetAccountCode| { &mut m.address },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryGetAccountCode>(
                "QueryGetAccountCode",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryGetAccountCode {
        static instance: ::protobuf::rt::LazyV2<QueryGetAccountCode> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryGetAccountCode::new)
    }
}

impl ::protobuf::Clear for QueryGetAccountCode {
    fn clear(&mut self) {
        self.address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryGetAccountCode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryGetAccountCode {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryGetAccountCodeResponse {
    // message fields
    pub code: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryGetAccountCodeResponse {
    fn default() -> &'a QueryGetAccountCodeResponse {
        <QueryGetAccountCodeResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryGetAccountCodeResponse {
    pub fn new() -> QueryGetAccountCodeResponse {
        ::std::default::Default::default()
    }

    // bytes code = 1;


    pub fn get_code(&self) -> &[u8] {
        &self.code
    }
    pub fn clear_code(&mut self) {
        self.code.clear();
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: ::std::vec::Vec<u8>) {
        self.code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_code(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.code
    }

    // Take field
    pub fn take_code(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.code, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for QueryGetAccountCodeResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.code)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.code.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.code);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.code.is_empty() {
            os.write_bytes(1, &self.code)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryGetAccountCodeResponse {
        QueryGetAccountCodeResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "code",
                |m: &QueryGetAccountCodeResponse| { &m.code },
                |m: &mut QueryGetAccountCodeResponse| { &mut m.code },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryGetAccountCodeResponse>(
                "QueryGetAccountCodeResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryGetAccountCodeResponse {
        static instance: ::protobuf::rt::LazyV2<QueryGetAccountCodeResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryGetAccountCodeResponse::new)
    }
}

impl ::protobuf::Clear for QueryGetAccountCodeResponse {
    fn clear(&mut self) {
        self.code.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryGetAccountCodeResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryGetAccountCodeResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryInsertAccountCode {
    // message fields
    pub address: ::std::vec::Vec<u8>,
    pub code: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryInsertAccountCode {
    fn default() -> &'a QueryInsertAccountCode {
        <QueryInsertAccountCode as ::protobuf::Message>::default_instance()
    }
}

impl QueryInsertAccountCode {
    pub fn new() -> QueryInsertAccountCode {
        ::std::default::Default::default()
    }

    // bytes address = 1;


    pub fn get_address(&self) -> &[u8] {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::vec::Vec<u8>) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.address, ::std::vec::Vec::new())
    }

    // bytes code = 2;


    pub fn get_code(&self) -> &[u8] {
        &self.code
    }
    pub fn clear_code(&mut self) {
        self.code.clear();
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: ::std::vec::Vec<u8>) {
        self.code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_code(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.code
    }

    // Take field
    pub fn take_code(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.code, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for QueryInsertAccountCode {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.code)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.address);
        }
        if !self.code.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.code);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.address.is_empty() {
            os.write_bytes(1, &self.address)?;
        }
        if !self.code.is_empty() {
            os.write_bytes(2, &self.code)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryInsertAccountCode {
        QueryInsertAccountCode::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "address",
                |m: &QueryInsertAccountCode| { &m.address },
                |m: &mut QueryInsertAccountCode| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "code",
                |m: &QueryInsertAccountCode| { &m.code },
                |m: &mut QueryInsertAccountCode| { &mut m.code },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryInsertAccountCode>(
                "QueryInsertAccountCode",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryInsertAccountCode {
        static instance: ::protobuf::rt::LazyV2<QueryInsertAccountCode> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryInsertAccountCode::new)
    }
}

impl ::protobuf::Clear for QueryInsertAccountCode {
    fn clear(&mut self) {
        self.address.clear();
        self.code.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryInsertAccountCode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryInsertAccountCode {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryInsertAccountCodeResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryInsertAccountCodeResponse {
    fn default() -> &'a QueryInsertAccountCodeResponse {
        <QueryInsertAccountCodeResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryInsertAccountCodeResponse {
    pub fn new() -> QueryInsertAccountCodeResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for QueryInsertAccountCodeResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryInsertAccountCodeResponse {
        QueryInsertAccountCodeResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryInsertAccountCodeResponse>(
                "QueryInsertAccountCodeResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryInsertAccountCodeResponse {
        static instance: ::protobuf::rt::LazyV2<QueryInsertAccountCodeResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryInsertAccountCodeResponse::new)
    }
}

impl ::protobuf::Clear for QueryInsertAccountCodeResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryInsertAccountCodeResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryInsertAccountCodeResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryInsertStorageCell {
    // message fields
    pub address: ::std::vec::Vec<u8>,
    pub index: ::std::vec::Vec<u8>,
    pub value: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryInsertStorageCell {
    fn default() -> &'a QueryInsertStorageCell {
        <QueryInsertStorageCell as ::protobuf::Message>::default_instance()
    }
}

impl QueryInsertStorageCell {
    pub fn new() -> QueryInsertStorageCell {
        ::std::default::Default::default()
    }

    // bytes address = 1;


    pub fn get_address(&self) -> &[u8] {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::vec::Vec<u8>) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.address, ::std::vec::Vec::new())
    }

    // bytes index = 2;


    pub fn get_index(&self) -> &[u8] {
        &self.index
    }
    pub fn clear_index(&mut self) {
        self.index.clear();
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: ::std::vec::Vec<u8>) {
        self.index = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_index(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.index
    }

    // Take field
    pub fn take_index(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.index, ::std::vec::Vec::new())
    }

    // bytes value = 3;


    pub fn get_value(&self) -> &[u8] {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.value, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for QueryInsertStorageCell {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.index)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.address);
        }
        if !self.index.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.index);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.address.is_empty() {
            os.write_bytes(1, &self.address)?;
        }
        if !self.index.is_empty() {
            os.write_bytes(2, &self.index)?;
        }
        if !self.value.is_empty() {
            os.write_bytes(3, &self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryInsertStorageCell {
        QueryInsertStorageCell::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "address",
                |m: &QueryInsertStorageCell| { &m.address },
                |m: &mut QueryInsertStorageCell| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "index",
                |m: &QueryInsertStorageCell| { &m.index },
                |m: &mut QueryInsertStorageCell| { &mut m.index },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "value",
                |m: &QueryInsertStorageCell| { &m.value },
                |m: &mut QueryInsertStorageCell| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryInsertStorageCell>(
                "QueryInsertStorageCell",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryInsertStorageCell {
        static instance: ::protobuf::rt::LazyV2<QueryInsertStorageCell> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryInsertStorageCell::new)
    }
}

impl ::protobuf::Clear for QueryInsertStorageCell {
    fn clear(&mut self) {
        self.address.clear();
        self.index.clear();
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryInsertStorageCell {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryInsertStorageCell {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryInsertStorageCellResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryInsertStorageCellResponse {
    fn default() -> &'a QueryInsertStorageCellResponse {
        <QueryInsertStorageCellResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryInsertStorageCellResponse {
    pub fn new() -> QueryInsertStorageCellResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for QueryInsertStorageCellResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryInsertStorageCellResponse {
        QueryInsertStorageCellResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryInsertStorageCellResponse>(
                "QueryInsertStorageCellResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryInsertStorageCellResponse {
        static instance: ::protobuf::rt::LazyV2<QueryInsertStorageCellResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryInsertStorageCellResponse::new)
    }
}

impl ::protobuf::Clear for QueryInsertStorageCellResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryInsertStorageCellResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryInsertStorageCellResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryRemove {
    // message fields
    pub address: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryRemove {
    fn default() -> &'a QueryRemove {
        <QueryRemove as ::protobuf::Message>::default_instance()
    }
}

impl QueryRemove {
    pub fn new() -> QueryRemove {
        ::std::default::Default::default()
    }

    // bytes address = 1;


    pub fn get_address(&self) -> &[u8] {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::vec::Vec<u8>) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.address, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for QueryRemove {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.address.is_empty() {
            os.write_bytes(1, &self.address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryRemove {
        QueryRemove::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "address",
                |m: &QueryRemove| { &m.address },
                |m: &mut QueryRemove| { &mut m.address },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryRemove>(
                "QueryRemove",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryRemove {
        static instance: ::protobuf::rt::LazyV2<QueryRemove> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryRemove::new)
    }
}

impl ::protobuf::Clear for QueryRemove {
    fn clear(&mut self) {
        self.address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryRemove {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryRemove {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryRemoveResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryRemoveResponse {
    fn default() -> &'a QueryRemoveResponse {
        <QueryRemoveResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryRemoveResponse {
    pub fn new() -> QueryRemoveResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for QueryRemoveResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryRemoveResponse {
        QueryRemoveResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryRemoveResponse>(
                "QueryRemoveResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryRemoveResponse {
        static instance: ::protobuf::rt::LazyV2<QueryRemoveResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryRemoveResponse::new)
    }
}

impl ::protobuf::Clear for QueryRemoveResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryRemoveResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryRemoveResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryRemoveStorageCell {
    // message fields
    pub address: ::std::vec::Vec<u8>,
    pub index: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryRemoveStorageCell {
    fn default() -> &'a QueryRemoveStorageCell {
        <QueryRemoveStorageCell as ::protobuf::Message>::default_instance()
    }
}

impl QueryRemoveStorageCell {
    pub fn new() -> QueryRemoveStorageCell {
        ::std::default::Default::default()
    }

    // bytes address = 1;


    pub fn get_address(&self) -> &[u8] {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::vec::Vec<u8>) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.address, ::std::vec::Vec::new())
    }

    // bytes index = 2;


    pub fn get_index(&self) -> &[u8] {
        &self.index
    }
    pub fn clear_index(&mut self) {
        self.index.clear();
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: ::std::vec::Vec<u8>) {
        self.index = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_index(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.index
    }

    // Take field
    pub fn take_index(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.index, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for QueryRemoveStorageCell {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.index)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.address);
        }
        if !self.index.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.index);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.address.is_empty() {
            os.write_bytes(1, &self.address)?;
        }
        if !self.index.is_empty() {
            os.write_bytes(2, &self.index)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryRemoveStorageCell {
        QueryRemoveStorageCell::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "address",
                |m: &QueryRemoveStorageCell| { &m.address },
                |m: &mut QueryRemoveStorageCell| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "index",
                |m: &QueryRemoveStorageCell| { &m.index },
                |m: &mut QueryRemoveStorageCell| { &mut m.index },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryRemoveStorageCell>(
                "QueryRemoveStorageCell",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryRemoveStorageCell {
        static instance: ::protobuf::rt::LazyV2<QueryRemoveStorageCell> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryRemoveStorageCell::new)
    }
}

impl ::protobuf::Clear for QueryRemoveStorageCell {
    fn clear(&mut self) {
        self.address.clear();
        self.index.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryRemoveStorageCell {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryRemoveStorageCell {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryRemoveStorageCellResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryRemoveStorageCellResponse {
    fn default() -> &'a QueryRemoveStorageCellResponse {
        <QueryRemoveStorageCellResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryRemoveStorageCellResponse {
    pub fn new() -> QueryRemoveStorageCellResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for QueryRemoveStorageCellResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryRemoveStorageCellResponse {
        QueryRemoveStorageCellResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryRemoveStorageCellResponse>(
                "QueryRemoveStorageCellResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryRemoveStorageCellResponse {
        static instance: ::protobuf::rt::LazyV2<QueryRemoveStorageCellResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryRemoveStorageCellResponse::new)
    }
}

impl ::protobuf::Clear for QueryRemoveStorageCellResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryRemoveStorageCellResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryRemoveStorageCellResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryRemoveStorage {
    // message fields
    pub address: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryRemoveStorage {
    fn default() -> &'a QueryRemoveStorage {
        <QueryRemoveStorage as ::protobuf::Message>::default_instance()
    }
}

impl QueryRemoveStorage {
    pub fn new() -> QueryRemoveStorage {
        ::std::default::Default::default()
    }

    // bytes address = 1;


    pub fn get_address(&self) -> &[u8] {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::vec::Vec<u8>) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.address, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for QueryRemoveStorage {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.address.is_empty() {
            os.write_bytes(1, &self.address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryRemoveStorage {
        QueryRemoveStorage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "address",
                |m: &QueryRemoveStorage| { &m.address },
                |m: &mut QueryRemoveStorage| { &mut m.address },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryRemoveStorage>(
                "QueryRemoveStorage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryRemoveStorage {
        static instance: ::protobuf::rt::LazyV2<QueryRemoveStorage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryRemoveStorage::new)
    }
}

impl ::protobuf::Clear for QueryRemoveStorage {
    fn clear(&mut self) {
        self.address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryRemoveStorage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryRemoveStorage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryRemoveStorageResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryRemoveStorageResponse {
    fn default() -> &'a QueryRemoveStorageResponse {
        <QueryRemoveStorageResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryRemoveStorageResponse {
    pub fn new() -> QueryRemoveStorageResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for QueryRemoveStorageResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryRemoveStorageResponse {
        QueryRemoveStorageResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryRemoveStorageResponse>(
                "QueryRemoveStorageResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryRemoveStorageResponse {
        static instance: ::protobuf::rt::LazyV2<QueryRemoveStorageResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryRemoveStorageResponse::new)
    }
}

impl ::protobuf::Clear for QueryRemoveStorageResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryRemoveStorageResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryRemoveStorageResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryBlockHash {
    // message fields
    pub number: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryBlockHash {
    fn default() -> &'a QueryBlockHash {
        <QueryBlockHash as ::protobuf::Message>::default_instance()
    }
}

impl QueryBlockHash {
    pub fn new() -> QueryBlockHash {
        ::std::default::Default::default()
    }

    // bytes number = 1;


    pub fn get_number(&self) -> &[u8] {
        &self.number
    }
    pub fn clear_number(&mut self) {
        self.number.clear();
    }

    // Param is passed by value, moved
    pub fn set_number(&mut self, v: ::std::vec::Vec<u8>) {
        self.number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_number(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.number
    }

    // Take field
    pub fn take_number(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.number, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for QueryBlockHash {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.number)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.number.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.number);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.number.is_empty() {
            os.write_bytes(1, &self.number)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryBlockHash {
        QueryBlockHash::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "number",
                |m: &QueryBlockHash| { &m.number },
                |m: &mut QueryBlockHash| { &mut m.number },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryBlockHash>(
                "QueryBlockHash",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryBlockHash {
        static instance: ::protobuf::rt::LazyV2<QueryBlockHash> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryBlockHash::new)
    }
}

impl ::protobuf::Clear for QueryBlockHash {
    fn clear(&mut self) {
        self.number.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryBlockHash {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryBlockHash {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryBlockHashResponse {
    // message fields
    pub hash: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryBlockHashResponse {
    fn default() -> &'a QueryBlockHashResponse {
        <QueryBlockHashResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryBlockHashResponse {
    pub fn new() -> QueryBlockHashResponse {
        ::std::default::Default::default()
    }

    // bytes hash = 1;


    pub fn get_hash(&self) -> &[u8] {
        &self.hash
    }
    pub fn clear_hash(&mut self) {
        self.hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.hash
    }

    // Take field
    pub fn take_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.hash, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for QueryBlockHashResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.hash)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.hash);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.hash.is_empty() {
            os.write_bytes(1, &self.hash)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryBlockHashResponse {
        QueryBlockHashResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "hash",
                |m: &QueryBlockHashResponse| { &m.hash },
                |m: &mut QueryBlockHashResponse| { &mut m.hash },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryBlockHashResponse>(
                "QueryBlockHashResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryBlockHashResponse {
        static instance: ::protobuf::rt::LazyV2<QueryBlockHashResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryBlockHashResponse::new)
    }
}

impl ::protobuf::Clear for QueryBlockHashResponse {
    fn clear(&mut self) {
        self.hash.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryBlockHashResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryBlockHashResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryBlockNumber {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryBlockNumber {
    fn default() -> &'a QueryBlockNumber {
        <QueryBlockNumber as ::protobuf::Message>::default_instance()
    }
}

impl QueryBlockNumber {
    pub fn new() -> QueryBlockNumber {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for QueryBlockNumber {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryBlockNumber {
        QueryBlockNumber::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryBlockNumber>(
                "QueryBlockNumber",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryBlockNumber {
        static instance: ::protobuf::rt::LazyV2<QueryBlockNumber> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryBlockNumber::new)
    }
}

impl ::protobuf::Clear for QueryBlockNumber {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryBlockNumber {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryBlockNumber {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryBlockNumberResponse {
    // message fields
    pub number: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryBlockNumberResponse {
    fn default() -> &'a QueryBlockNumberResponse {
        <QueryBlockNumberResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryBlockNumberResponse {
    pub fn new() -> QueryBlockNumberResponse {
        ::std::default::Default::default()
    }

    // bytes number = 1;


    pub fn get_number(&self) -> &[u8] {
        &self.number
    }
    pub fn clear_number(&mut self) {
        self.number.clear();
    }

    // Param is passed by value, moved
    pub fn set_number(&mut self, v: ::std::vec::Vec<u8>) {
        self.number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_number(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.number
    }

    // Take field
    pub fn take_number(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.number, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for QueryBlockNumberResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.number)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.number.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.number);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.number.is_empty() {
            os.write_bytes(1, &self.number)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryBlockNumberResponse {
        QueryBlockNumberResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "number",
                |m: &QueryBlockNumberResponse| { &m.number },
                |m: &mut QueryBlockNumberResponse| { &mut m.number },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryBlockNumberResponse>(
                "QueryBlockNumberResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryBlockNumberResponse {
        static instance: ::protobuf::rt::LazyV2<QueryBlockNumberResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryBlockNumberResponse::new)
    }
}

impl ::protobuf::Clear for QueryBlockNumberResponse {
    fn clear(&mut self) {
        self.number.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryBlockNumberResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryBlockNumberResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryBlockTimestamp {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryBlockTimestamp {
    fn default() -> &'a QueryBlockTimestamp {
        <QueryBlockTimestamp as ::protobuf::Message>::default_instance()
    }
}

impl QueryBlockTimestamp {
    pub fn new() -> QueryBlockTimestamp {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for QueryBlockTimestamp {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryBlockTimestamp {
        QueryBlockTimestamp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryBlockTimestamp>(
                "QueryBlockTimestamp",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryBlockTimestamp {
        static instance: ::protobuf::rt::LazyV2<QueryBlockTimestamp> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryBlockTimestamp::new)
    }
}

impl ::protobuf::Clear for QueryBlockTimestamp {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryBlockTimestamp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryBlockTimestamp {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryBlockTimestampResponse {
    // message fields
    pub timestamp: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryBlockTimestampResponse {
    fn default() -> &'a QueryBlockTimestampResponse {
        <QueryBlockTimestampResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryBlockTimestampResponse {
    pub fn new() -> QueryBlockTimestampResponse {
        ::std::default::Default::default()
    }

    // bytes timestamp = 1;


    pub fn get_timestamp(&self) -> &[u8] {
        &self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp.clear();
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: ::std::vec::Vec<u8>) {
        self.timestamp = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timestamp(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.timestamp
    }

    // Take field
    pub fn take_timestamp(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.timestamp, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for QueryBlockTimestampResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.timestamp)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.timestamp.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.timestamp);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.timestamp.is_empty() {
            os.write_bytes(1, &self.timestamp)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryBlockTimestampResponse {
        QueryBlockTimestampResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "timestamp",
                |m: &QueryBlockTimestampResponse| { &m.timestamp },
                |m: &mut QueryBlockTimestampResponse| { &mut m.timestamp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryBlockTimestampResponse>(
                "QueryBlockTimestampResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryBlockTimestampResponse {
        static instance: ::protobuf::rt::LazyV2<QueryBlockTimestampResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryBlockTimestampResponse::new)
    }
}

impl ::protobuf::Clear for QueryBlockTimestampResponse {
    fn clear(&mut self) {
        self.timestamp.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryBlockTimestampResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryBlockTimestampResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryChainId {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryChainId {
    fn default() -> &'a QueryChainId {
        <QueryChainId as ::protobuf::Message>::default_instance()
    }
}

impl QueryChainId {
    pub fn new() -> QueryChainId {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for QueryChainId {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryChainId {
        QueryChainId::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryChainId>(
                "QueryChainId",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryChainId {
        static instance: ::protobuf::rt::LazyV2<QueryChainId> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryChainId::new)
    }
}

impl ::protobuf::Clear for QueryChainId {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryChainId {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryChainId {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryChainIdResponse {
    // message fields
    pub chain_id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryChainIdResponse {
    fn default() -> &'a QueryChainIdResponse {
        <QueryChainIdResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryChainIdResponse {
    pub fn new() -> QueryChainIdResponse {
        ::std::default::Default::default()
    }

    // bytes chain_id = 1;


    pub fn get_chain_id(&self) -> &[u8] {
        &self.chain_id
    }
    pub fn clear_chain_id(&mut self) {
        self.chain_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_chain_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.chain_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_chain_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.chain_id
    }

    // Take field
    pub fn take_chain_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.chain_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for QueryChainIdResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.chain_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.chain_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.chain_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.chain_id.is_empty() {
            os.write_bytes(1, &self.chain_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryChainIdResponse {
        QueryChainIdResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "chain_id",
                |m: &QueryChainIdResponse| { &m.chain_id },
                |m: &mut QueryChainIdResponse| { &mut m.chain_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryChainIdResponse>(
                "QueryChainIdResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryChainIdResponse {
        static instance: ::protobuf::rt::LazyV2<QueryChainIdResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryChainIdResponse::new)
    }
}

impl ::protobuf::Clear for QueryChainIdResponse {
    fn clear(&mut self) {
        self.chain_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryChainIdResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryChainIdResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CosmosRequest {
    // message oneof groups
    pub req: ::std::option::Option<CosmosRequest_oneof_req>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CosmosRequest {
    fn default() -> &'a CosmosRequest {
        <CosmosRequest as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum CosmosRequest_oneof_req {
    getAccount(QueryGetAccount),
    insertAccount(QueryInsertAccount),
    containsKey(QueryContainsKey),
    accountCode(QueryGetAccountCode),
    storageCell(QueryGetAccountStorageCell),
    insertAccountCode(QueryInsertAccountCode),
    insertStorageCell(QueryInsertStorageCell),
    remove(QueryRemove),
    removeStorageCell(QueryRemoveStorageCell),
    removeStorage(QueryRemoveStorage),
    blockHash(QueryBlockHash),
    blockNumber(QueryBlockNumber),
    blockTimestamp(QueryBlockTimestamp),
    chainId(QueryChainId),
}

impl CosmosRequest {
    pub fn new() -> CosmosRequest {
        ::std::default::Default::default()
    }

    // .ffi.ffi.QueryGetAccount getAccount = 1;


    pub fn get_getAccount(&self) -> &QueryGetAccount {
        match self.req {
            ::std::option::Option::Some(CosmosRequest_oneof_req::getAccount(ref v)) => v,
            _ => <QueryGetAccount as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_getAccount(&mut self) {
        self.req = ::std::option::Option::None;
    }

    pub fn has_getAccount(&self) -> bool {
        match self.req {
            ::std::option::Option::Some(CosmosRequest_oneof_req::getAccount(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_getAccount(&mut self, v: QueryGetAccount) {
        self.req = ::std::option::Option::Some(CosmosRequest_oneof_req::getAccount(v))
    }

    // Mutable pointer to the field.
    pub fn mut_getAccount(&mut self) -> &mut QueryGetAccount {
        if let ::std::option::Option::Some(CosmosRequest_oneof_req::getAccount(_)) = self.req {
        } else {
            self.req = ::std::option::Option::Some(CosmosRequest_oneof_req::getAccount(QueryGetAccount::new()));
        }
        match self.req {
            ::std::option::Option::Some(CosmosRequest_oneof_req::getAccount(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_getAccount(&mut self) -> QueryGetAccount {
        if self.has_getAccount() {
            match self.req.take() {
                ::std::option::Option::Some(CosmosRequest_oneof_req::getAccount(v)) => v,
                _ => panic!(),
            }
        } else {
            QueryGetAccount::new()
        }
    }

    // .ffi.ffi.QueryInsertAccount insertAccount = 2;


    pub fn get_insertAccount(&self) -> &QueryInsertAccount {
        match self.req {
            ::std::option::Option::Some(CosmosRequest_oneof_req::insertAccount(ref v)) => v,
            _ => <QueryInsertAccount as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_insertAccount(&mut self) {
        self.req = ::std::option::Option::None;
    }

    pub fn has_insertAccount(&self) -> bool {
        match self.req {
            ::std::option::Option::Some(CosmosRequest_oneof_req::insertAccount(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_insertAccount(&mut self, v: QueryInsertAccount) {
        self.req = ::std::option::Option::Some(CosmosRequest_oneof_req::insertAccount(v))
    }

    // Mutable pointer to the field.
    pub fn mut_insertAccount(&mut self) -> &mut QueryInsertAccount {
        if let ::std::option::Option::Some(CosmosRequest_oneof_req::insertAccount(_)) = self.req {
        } else {
            self.req = ::std::option::Option::Some(CosmosRequest_oneof_req::insertAccount(QueryInsertAccount::new()));
        }
        match self.req {
            ::std::option::Option::Some(CosmosRequest_oneof_req::insertAccount(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_insertAccount(&mut self) -> QueryInsertAccount {
        if self.has_insertAccount() {
            match self.req.take() {
                ::std::option::Option::Some(CosmosRequest_oneof_req::insertAccount(v)) => v,
                _ => panic!(),
            }
        } else {
            QueryInsertAccount::new()
        }
    }

    // .ffi.ffi.QueryContainsKey containsKey = 3;


    pub fn get_containsKey(&self) -> &QueryContainsKey {
        match self.req {
            ::std::option::Option::Some(CosmosRequest_oneof_req::containsKey(ref v)) => v,
            _ => <QueryContainsKey as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_containsKey(&mut self) {
        self.req = ::std::option::Option::None;
    }

    pub fn has_containsKey(&self) -> bool {
        match self.req {
            ::std::option::Option::Some(CosmosRequest_oneof_req::containsKey(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_containsKey(&mut self, v: QueryContainsKey) {
        self.req = ::std::option::Option::Some(CosmosRequest_oneof_req::containsKey(v))
    }

    // Mutable pointer to the field.
    pub fn mut_containsKey(&mut self) -> &mut QueryContainsKey {
        if let ::std::option::Option::Some(CosmosRequest_oneof_req::containsKey(_)) = self.req {
        } else {
            self.req = ::std::option::Option::Some(CosmosRequest_oneof_req::containsKey(QueryContainsKey::new()));
        }
        match self.req {
            ::std::option::Option::Some(CosmosRequest_oneof_req::containsKey(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_containsKey(&mut self) -> QueryContainsKey {
        if self.has_containsKey() {
            match self.req.take() {
                ::std::option::Option::Some(CosmosRequest_oneof_req::containsKey(v)) => v,
                _ => panic!(),
            }
        } else {
            QueryContainsKey::new()
        }
    }

    // .ffi.ffi.QueryGetAccountCode accountCode = 4;


    pub fn get_accountCode(&self) -> &QueryGetAccountCode {
        match self.req {
            ::std::option::Option::Some(CosmosRequest_oneof_req::accountCode(ref v)) => v,
            _ => <QueryGetAccountCode as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_accountCode(&mut self) {
        self.req = ::std::option::Option::None;
    }

    pub fn has_accountCode(&self) -> bool {
        match self.req {
            ::std::option::Option::Some(CosmosRequest_oneof_req::accountCode(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_accountCode(&mut self, v: QueryGetAccountCode) {
        self.req = ::std::option::Option::Some(CosmosRequest_oneof_req::accountCode(v))
    }

    // Mutable pointer to the field.
    pub fn mut_accountCode(&mut self) -> &mut QueryGetAccountCode {
        if let ::std::option::Option::Some(CosmosRequest_oneof_req::accountCode(_)) = self.req {
        } else {
            self.req = ::std::option::Option::Some(CosmosRequest_oneof_req::accountCode(QueryGetAccountCode::new()));
        }
        match self.req {
            ::std::option::Option::Some(CosmosRequest_oneof_req::accountCode(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_accountCode(&mut self) -> QueryGetAccountCode {
        if self.has_accountCode() {
            match self.req.take() {
                ::std::option::Option::Some(CosmosRequest_oneof_req::accountCode(v)) => v,
                _ => panic!(),
            }
        } else {
            QueryGetAccountCode::new()
        }
    }

    // .ffi.ffi.QueryGetAccountStorageCell storageCell = 5;


    pub fn get_storageCell(&self) -> &QueryGetAccountStorageCell {
        match self.req {
            ::std::option::Option::Some(CosmosRequest_oneof_req::storageCell(ref v)) => v,
            _ => <QueryGetAccountStorageCell as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_storageCell(&mut self) {
        self.req = ::std::option::Option::None;
    }

    pub fn has_storageCell(&self) -> bool {
        match self.req {
            ::std::option::Option::Some(CosmosRequest_oneof_req::storageCell(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_storageCell(&mut self, v: QueryGetAccountStorageCell) {
        self.req = ::std::option::Option::Some(CosmosRequest_oneof_req::storageCell(v))
    }

    // Mutable pointer to the field.
    pub fn mut_storageCell(&mut self) -> &mut QueryGetAccountStorageCell {
        if let ::std::option::Option::Some(CosmosRequest_oneof_req::storageCell(_)) = self.req {
        } else {
            self.req = ::std::option::Option::Some(CosmosRequest_oneof_req::storageCell(QueryGetAccountStorageCell::new()));
        }
        match self.req {
            ::std::option::Option::Some(CosmosRequest_oneof_req::storageCell(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_storageCell(&mut self) -> QueryGetAccountStorageCell {
        if self.has_storageCell() {
            match self.req.take() {
                ::std::option::Option::Some(CosmosRequest_oneof_req::storageCell(v)) => v,
                _ => panic!(),
            }
        } else {
            QueryGetAccountStorageCell::new()
        }
    }

    // .ffi.ffi.QueryInsertAccountCode insertAccountCode = 6;


    pub fn get_insertAccountCode(&self) -> &QueryInsertAccountCode {
        match self.req {
            ::std::option::Option::Some(CosmosRequest_oneof_req::insertAccountCode(ref v)) => v,
            _ => <QueryInsertAccountCode as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_insertAccountCode(&mut self) {
        self.req = ::std::option::Option::None;
    }

    pub fn has_insertAccountCode(&self) -> bool {
        match self.req {
            ::std::option::Option::Some(CosmosRequest_oneof_req::insertAccountCode(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_insertAccountCode(&mut self, v: QueryInsertAccountCode) {
        self.req = ::std::option::Option::Some(CosmosRequest_oneof_req::insertAccountCode(v))
    }

    // Mutable pointer to the field.
    pub fn mut_insertAccountCode(&mut self) -> &mut QueryInsertAccountCode {
        if let ::std::option::Option::Some(CosmosRequest_oneof_req::insertAccountCode(_)) = self.req {
        } else {
            self.req = ::std::option::Option::Some(CosmosRequest_oneof_req::insertAccountCode(QueryInsertAccountCode::new()));
        }
        match self.req {
            ::std::option::Option::Some(CosmosRequest_oneof_req::insertAccountCode(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_insertAccountCode(&mut self) -> QueryInsertAccountCode {
        if self.has_insertAccountCode() {
            match self.req.take() {
                ::std::option::Option::Some(CosmosRequest_oneof_req::insertAccountCode(v)) => v,
                _ => panic!(),
            }
        } else {
            QueryInsertAccountCode::new()
        }
    }

    // .ffi.ffi.QueryInsertStorageCell insertStorageCell = 7;


    pub fn get_insertStorageCell(&self) -> &QueryInsertStorageCell {
        match self.req {
            ::std::option::Option::Some(CosmosRequest_oneof_req::insertStorageCell(ref v)) => v,
            _ => <QueryInsertStorageCell as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_insertStorageCell(&mut self) {
        self.req = ::std::option::Option::None;
    }

    pub fn has_insertStorageCell(&self) -> bool {
        match self.req {
            ::std::option::Option::Some(CosmosRequest_oneof_req::insertStorageCell(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_insertStorageCell(&mut self, v: QueryInsertStorageCell) {
        self.req = ::std::option::Option::Some(CosmosRequest_oneof_req::insertStorageCell(v))
    }

    // Mutable pointer to the field.
    pub fn mut_insertStorageCell(&mut self) -> &mut QueryInsertStorageCell {
        if let ::std::option::Option::Some(CosmosRequest_oneof_req::insertStorageCell(_)) = self.req {
        } else {
            self.req = ::std::option::Option::Some(CosmosRequest_oneof_req::insertStorageCell(QueryInsertStorageCell::new()));
        }
        match self.req {
            ::std::option::Option::Some(CosmosRequest_oneof_req::insertStorageCell(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_insertStorageCell(&mut self) -> QueryInsertStorageCell {
        if self.has_insertStorageCell() {
            match self.req.take() {
                ::std::option::Option::Some(CosmosRequest_oneof_req::insertStorageCell(v)) => v,
                _ => panic!(),
            }
        } else {
            QueryInsertStorageCell::new()
        }
    }

    // .ffi.ffi.QueryRemove remove = 8;


    pub fn get_remove(&self) -> &QueryRemove {
        match self.req {
            ::std::option::Option::Some(CosmosRequest_oneof_req::remove(ref v)) => v,
            _ => <QueryRemove as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_remove(&mut self) {
        self.req = ::std::option::Option::None;
    }

    pub fn has_remove(&self) -> bool {
        match self.req {
            ::std::option::Option::Some(CosmosRequest_oneof_req::remove(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_remove(&mut self, v: QueryRemove) {
        self.req = ::std::option::Option::Some(CosmosRequest_oneof_req::remove(v))
    }

    // Mutable pointer to the field.
    pub fn mut_remove(&mut self) -> &mut QueryRemove {
        if let ::std::option::Option::Some(CosmosRequest_oneof_req::remove(_)) = self.req {
        } else {
            self.req = ::std::option::Option::Some(CosmosRequest_oneof_req::remove(QueryRemove::new()));
        }
        match self.req {
            ::std::option::Option::Some(CosmosRequest_oneof_req::remove(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_remove(&mut self) -> QueryRemove {
        if self.has_remove() {
            match self.req.take() {
                ::std::option::Option::Some(CosmosRequest_oneof_req::remove(v)) => v,
                _ => panic!(),
            }
        } else {
            QueryRemove::new()
        }
    }

    // .ffi.ffi.QueryRemoveStorageCell removeStorageCell = 9;


    pub fn get_removeStorageCell(&self) -> &QueryRemoveStorageCell {
        match self.req {
            ::std::option::Option::Some(CosmosRequest_oneof_req::removeStorageCell(ref v)) => v,
            _ => <QueryRemoveStorageCell as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_removeStorageCell(&mut self) {
        self.req = ::std::option::Option::None;
    }

    pub fn has_removeStorageCell(&self) -> bool {
        match self.req {
            ::std::option::Option::Some(CosmosRequest_oneof_req::removeStorageCell(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_removeStorageCell(&mut self, v: QueryRemoveStorageCell) {
        self.req = ::std::option::Option::Some(CosmosRequest_oneof_req::removeStorageCell(v))
    }

    // Mutable pointer to the field.
    pub fn mut_removeStorageCell(&mut self) -> &mut QueryRemoveStorageCell {
        if let ::std::option::Option::Some(CosmosRequest_oneof_req::removeStorageCell(_)) = self.req {
        } else {
            self.req = ::std::option::Option::Some(CosmosRequest_oneof_req::removeStorageCell(QueryRemoveStorageCell::new()));
        }
        match self.req {
            ::std::option::Option::Some(CosmosRequest_oneof_req::removeStorageCell(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_removeStorageCell(&mut self) -> QueryRemoveStorageCell {
        if self.has_removeStorageCell() {
            match self.req.take() {
                ::std::option::Option::Some(CosmosRequest_oneof_req::removeStorageCell(v)) => v,
                _ => panic!(),
            }
        } else {
            QueryRemoveStorageCell::new()
        }
    }

    // .ffi.ffi.QueryRemoveStorage removeStorage = 10;


    pub fn get_removeStorage(&self) -> &QueryRemoveStorage {
        match self.req {
            ::std::option::Option::Some(CosmosRequest_oneof_req::removeStorage(ref v)) => v,
            _ => <QueryRemoveStorage as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_removeStorage(&mut self) {
        self.req = ::std::option::Option::None;
    }

    pub fn has_removeStorage(&self) -> bool {
        match self.req {
            ::std::option::Option::Some(CosmosRequest_oneof_req::removeStorage(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_removeStorage(&mut self, v: QueryRemoveStorage) {
        self.req = ::std::option::Option::Some(CosmosRequest_oneof_req::removeStorage(v))
    }

    // Mutable pointer to the field.
    pub fn mut_removeStorage(&mut self) -> &mut QueryRemoveStorage {
        if let ::std::option::Option::Some(CosmosRequest_oneof_req::removeStorage(_)) = self.req {
        } else {
            self.req = ::std::option::Option::Some(CosmosRequest_oneof_req::removeStorage(QueryRemoveStorage::new()));
        }
        match self.req {
            ::std::option::Option::Some(CosmosRequest_oneof_req::removeStorage(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_removeStorage(&mut self) -> QueryRemoveStorage {
        if self.has_removeStorage() {
            match self.req.take() {
                ::std::option::Option::Some(CosmosRequest_oneof_req::removeStorage(v)) => v,
                _ => panic!(),
            }
        } else {
            QueryRemoveStorage::new()
        }
    }

    // .ffi.ffi.QueryBlockHash blockHash = 11;


    pub fn get_blockHash(&self) -> &QueryBlockHash {
        match self.req {
            ::std::option::Option::Some(CosmosRequest_oneof_req::blockHash(ref v)) => v,
            _ => <QueryBlockHash as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_blockHash(&mut self) {
        self.req = ::std::option::Option::None;
    }

    pub fn has_blockHash(&self) -> bool {
        match self.req {
            ::std::option::Option::Some(CosmosRequest_oneof_req::blockHash(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_blockHash(&mut self, v: QueryBlockHash) {
        self.req = ::std::option::Option::Some(CosmosRequest_oneof_req::blockHash(v))
    }

    // Mutable pointer to the field.
    pub fn mut_blockHash(&mut self) -> &mut QueryBlockHash {
        if let ::std::option::Option::Some(CosmosRequest_oneof_req::blockHash(_)) = self.req {
        } else {
            self.req = ::std::option::Option::Some(CosmosRequest_oneof_req::blockHash(QueryBlockHash::new()));
        }
        match self.req {
            ::std::option::Option::Some(CosmosRequest_oneof_req::blockHash(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_blockHash(&mut self) -> QueryBlockHash {
        if self.has_blockHash() {
            match self.req.take() {
                ::std::option::Option::Some(CosmosRequest_oneof_req::blockHash(v)) => v,
                _ => panic!(),
            }
        } else {
            QueryBlockHash::new()
        }
    }

    // .ffi.ffi.QueryBlockNumber blockNumber = 12;


    pub fn get_blockNumber(&self) -> &QueryBlockNumber {
        match self.req {
            ::std::option::Option::Some(CosmosRequest_oneof_req::blockNumber(ref v)) => v,
            _ => <QueryBlockNumber as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_blockNumber(&mut self) {
        self.req = ::std::option::Option::None;
    }

    pub fn has_blockNumber(&self) -> bool {
        match self.req {
            ::std::option::Option::Some(CosmosRequest_oneof_req::blockNumber(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_blockNumber(&mut self, v: QueryBlockNumber) {
        self.req = ::std::option::Option::Some(CosmosRequest_oneof_req::blockNumber(v))
    }

    // Mutable pointer to the field.
    pub fn mut_blockNumber(&mut self) -> &mut QueryBlockNumber {
        if let ::std::option::Option::Some(CosmosRequest_oneof_req::blockNumber(_)) = self.req {
        } else {
            self.req = ::std::option::Option::Some(CosmosRequest_oneof_req::blockNumber(QueryBlockNumber::new()));
        }
        match self.req {
            ::std::option::Option::Some(CosmosRequest_oneof_req::blockNumber(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_blockNumber(&mut self) -> QueryBlockNumber {
        if self.has_blockNumber() {
            match self.req.take() {
                ::std::option::Option::Some(CosmosRequest_oneof_req::blockNumber(v)) => v,
                _ => panic!(),
            }
        } else {
            QueryBlockNumber::new()
        }
    }

    // .ffi.ffi.QueryBlockTimestamp blockTimestamp = 13;


    pub fn get_blockTimestamp(&self) -> &QueryBlockTimestamp {
        match self.req {
            ::std::option::Option::Some(CosmosRequest_oneof_req::blockTimestamp(ref v)) => v,
            _ => <QueryBlockTimestamp as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_blockTimestamp(&mut self) {
        self.req = ::std::option::Option::None;
    }

    pub fn has_blockTimestamp(&self) -> bool {
        match self.req {
            ::std::option::Option::Some(CosmosRequest_oneof_req::blockTimestamp(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_blockTimestamp(&mut self, v: QueryBlockTimestamp) {
        self.req = ::std::option::Option::Some(CosmosRequest_oneof_req::blockTimestamp(v))
    }

    // Mutable pointer to the field.
    pub fn mut_blockTimestamp(&mut self) -> &mut QueryBlockTimestamp {
        if let ::std::option::Option::Some(CosmosRequest_oneof_req::blockTimestamp(_)) = self.req {
        } else {
            self.req = ::std::option::Option::Some(CosmosRequest_oneof_req::blockTimestamp(QueryBlockTimestamp::new()));
        }
        match self.req {
            ::std::option::Option::Some(CosmosRequest_oneof_req::blockTimestamp(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_blockTimestamp(&mut self) -> QueryBlockTimestamp {
        if self.has_blockTimestamp() {
            match self.req.take() {
                ::std::option::Option::Some(CosmosRequest_oneof_req::blockTimestamp(v)) => v,
                _ => panic!(),
            }
        } else {
            QueryBlockTimestamp::new()
        }
    }

    // .ffi.ffi.QueryChainId chainId = 14;


    pub fn get_chainId(&self) -> &QueryChainId {
        match self.req {
            ::std::option::Option::Some(CosmosRequest_oneof_req::chainId(ref v)) => v,
            _ => <QueryChainId as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_chainId(&mut self) {
        self.req = ::std::option::Option::None;
    }

    pub fn has_chainId(&self) -> bool {
        match self.req {
            ::std::option::Option::Some(CosmosRequest_oneof_req::chainId(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_chainId(&mut self, v: QueryChainId) {
        self.req = ::std::option::Option::Some(CosmosRequest_oneof_req::chainId(v))
    }

    // Mutable pointer to the field.
    pub fn mut_chainId(&mut self) -> &mut QueryChainId {
        if let ::std::option::Option::Some(CosmosRequest_oneof_req::chainId(_)) = self.req {
        } else {
            self.req = ::std::option::Option::Some(CosmosRequest_oneof_req::chainId(QueryChainId::new()));
        }
        match self.req {
            ::std::option::Option::Some(CosmosRequest_oneof_req::chainId(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_chainId(&mut self) -> QueryChainId {
        if self.has_chainId() {
            match self.req.take() {
                ::std::option::Option::Some(CosmosRequest_oneof_req::chainId(v)) => v,
                _ => panic!(),
            }
        } else {
            QueryChainId::new()
        }
    }
}

impl ::protobuf::Message for CosmosRequest {
    fn is_initialized(&self) -> bool {
        if let Some(CosmosRequest_oneof_req::getAccount(ref v)) = self.req {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(CosmosRequest_oneof_req::insertAccount(ref v)) = self.req {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(CosmosRequest_oneof_req::containsKey(ref v)) = self.req {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(CosmosRequest_oneof_req::accountCode(ref v)) = self.req {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(CosmosRequest_oneof_req::storageCell(ref v)) = self.req {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(CosmosRequest_oneof_req::insertAccountCode(ref v)) = self.req {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(CosmosRequest_oneof_req::insertStorageCell(ref v)) = self.req {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(CosmosRequest_oneof_req::remove(ref v)) = self.req {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(CosmosRequest_oneof_req::removeStorageCell(ref v)) = self.req {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(CosmosRequest_oneof_req::removeStorage(ref v)) = self.req {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(CosmosRequest_oneof_req::blockHash(ref v)) = self.req {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(CosmosRequest_oneof_req::blockNumber(ref v)) = self.req {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(CosmosRequest_oneof_req::blockTimestamp(ref v)) = self.req {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(CosmosRequest_oneof_req::chainId(ref v)) = self.req {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.req = ::std::option::Option::Some(CosmosRequest_oneof_req::getAccount(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.req = ::std::option::Option::Some(CosmosRequest_oneof_req::insertAccount(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.req = ::std::option::Option::Some(CosmosRequest_oneof_req::containsKey(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.req = ::std::option::Option::Some(CosmosRequest_oneof_req::accountCode(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.req = ::std::option::Option::Some(CosmosRequest_oneof_req::storageCell(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.req = ::std::option::Option::Some(CosmosRequest_oneof_req::insertAccountCode(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.req = ::std::option::Option::Some(CosmosRequest_oneof_req::insertStorageCell(is.read_message()?));
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.req = ::std::option::Option::Some(CosmosRequest_oneof_req::remove(is.read_message()?));
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.req = ::std::option::Option::Some(CosmosRequest_oneof_req::removeStorageCell(is.read_message()?));
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.req = ::std::option::Option::Some(CosmosRequest_oneof_req::removeStorage(is.read_message()?));
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.req = ::std::option::Option::Some(CosmosRequest_oneof_req::blockHash(is.read_message()?));
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.req = ::std::option::Option::Some(CosmosRequest_oneof_req::blockNumber(is.read_message()?));
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.req = ::std::option::Option::Some(CosmosRequest_oneof_req::blockTimestamp(is.read_message()?));
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.req = ::std::option::Option::Some(CosmosRequest_oneof_req::chainId(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.req {
            match v {
                &CosmosRequest_oneof_req::getAccount(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &CosmosRequest_oneof_req::insertAccount(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &CosmosRequest_oneof_req::containsKey(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &CosmosRequest_oneof_req::accountCode(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &CosmosRequest_oneof_req::storageCell(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &CosmosRequest_oneof_req::insertAccountCode(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &CosmosRequest_oneof_req::insertStorageCell(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &CosmosRequest_oneof_req::remove(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &CosmosRequest_oneof_req::removeStorageCell(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &CosmosRequest_oneof_req::removeStorage(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &CosmosRequest_oneof_req::blockHash(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &CosmosRequest_oneof_req::blockNumber(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &CosmosRequest_oneof_req::blockTimestamp(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &CosmosRequest_oneof_req::chainId(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.req {
            match v {
                &CosmosRequest_oneof_req::getAccount(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &CosmosRequest_oneof_req::insertAccount(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &CosmosRequest_oneof_req::containsKey(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &CosmosRequest_oneof_req::accountCode(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &CosmosRequest_oneof_req::storageCell(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &CosmosRequest_oneof_req::insertAccountCode(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &CosmosRequest_oneof_req::insertStorageCell(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &CosmosRequest_oneof_req::remove(ref v) => {
                    os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &CosmosRequest_oneof_req::removeStorageCell(ref v) => {
                    os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &CosmosRequest_oneof_req::removeStorage(ref v) => {
                    os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &CosmosRequest_oneof_req::blockHash(ref v) => {
                    os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &CosmosRequest_oneof_req::blockNumber(ref v) => {
                    os.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &CosmosRequest_oneof_req::blockTimestamp(ref v) => {
                    os.write_tag(13, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &CosmosRequest_oneof_req::chainId(ref v) => {
                    os.write_tag(14, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CosmosRequest {
        CosmosRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, QueryGetAccount>(
                "getAccount",
                CosmosRequest::has_getAccount,
                CosmosRequest::get_getAccount,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, QueryInsertAccount>(
                "insertAccount",
                CosmosRequest::has_insertAccount,
                CosmosRequest::get_insertAccount,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, QueryContainsKey>(
                "containsKey",
                CosmosRequest::has_containsKey,
                CosmosRequest::get_containsKey,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, QueryGetAccountCode>(
                "accountCode",
                CosmosRequest::has_accountCode,
                CosmosRequest::get_accountCode,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, QueryGetAccountStorageCell>(
                "storageCell",
                CosmosRequest::has_storageCell,
                CosmosRequest::get_storageCell,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, QueryInsertAccountCode>(
                "insertAccountCode",
                CosmosRequest::has_insertAccountCode,
                CosmosRequest::get_insertAccountCode,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, QueryInsertStorageCell>(
                "insertStorageCell",
                CosmosRequest::has_insertStorageCell,
                CosmosRequest::get_insertStorageCell,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, QueryRemove>(
                "remove",
                CosmosRequest::has_remove,
                CosmosRequest::get_remove,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, QueryRemoveStorageCell>(
                "removeStorageCell",
                CosmosRequest::has_removeStorageCell,
                CosmosRequest::get_removeStorageCell,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, QueryRemoveStorage>(
                "removeStorage",
                CosmosRequest::has_removeStorage,
                CosmosRequest::get_removeStorage,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, QueryBlockHash>(
                "blockHash",
                CosmosRequest::has_blockHash,
                CosmosRequest::get_blockHash,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, QueryBlockNumber>(
                "blockNumber",
                CosmosRequest::has_blockNumber,
                CosmosRequest::get_blockNumber,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, QueryBlockTimestamp>(
                "blockTimestamp",
                CosmosRequest::has_blockTimestamp,
                CosmosRequest::get_blockTimestamp,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, QueryChainId>(
                "chainId",
                CosmosRequest::has_chainId,
                CosmosRequest::get_chainId,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CosmosRequest>(
                "CosmosRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CosmosRequest {
        static instance: ::protobuf::rt::LazyV2<CosmosRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CosmosRequest::new)
    }
}

impl ::protobuf::Clear for CosmosRequest {
    fn clear(&mut self) {
        self.req = ::std::option::Option::None;
        self.req = ::std::option::Option::None;
        self.req = ::std::option::Option::None;
        self.req = ::std::option::Option::None;
        self.req = ::std::option::Option::None;
        self.req = ::std::option::Option::None;
        self.req = ::std::option::Option::None;
        self.req = ::std::option::Option::None;
        self.req = ::std::option::Option::None;
        self.req = ::std::option::Option::None;
        self.req = ::std::option::Option::None;
        self.req = ::std::option::Option::None;
        self.req = ::std::option::Option::None;
        self.req = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CosmosRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CosmosRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FFIRequest {
    // message oneof groups
    pub req: ::std::option::Option<FFIRequest_oneof_req>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FFIRequest {
    fn default() -> &'a FFIRequest {
        <FFIRequest as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum FFIRequest_oneof_req {
    handleTransaction(TransactionData),
}

impl FFIRequest {
    pub fn new() -> FFIRequest {
        ::std::default::Default::default()
    }

    // .ffi.ffi.TransactionData handleTransaction = 1;


    pub fn get_handleTransaction(&self) -> &TransactionData {
        match self.req {
            ::std::option::Option::Some(FFIRequest_oneof_req::handleTransaction(ref v)) => v,
            _ => <TransactionData as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_handleTransaction(&mut self) {
        self.req = ::std::option::Option::None;
    }

    pub fn has_handleTransaction(&self) -> bool {
        match self.req {
            ::std::option::Option::Some(FFIRequest_oneof_req::handleTransaction(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_handleTransaction(&mut self, v: TransactionData) {
        self.req = ::std::option::Option::Some(FFIRequest_oneof_req::handleTransaction(v))
    }

    // Mutable pointer to the field.
    pub fn mut_handleTransaction(&mut self) -> &mut TransactionData {
        if let ::std::option::Option::Some(FFIRequest_oneof_req::handleTransaction(_)) = self.req {
        } else {
            self.req = ::std::option::Option::Some(FFIRequest_oneof_req::handleTransaction(TransactionData::new()));
        }
        match self.req {
            ::std::option::Option::Some(FFIRequest_oneof_req::handleTransaction(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_handleTransaction(&mut self) -> TransactionData {
        if self.has_handleTransaction() {
            match self.req.take() {
                ::std::option::Option::Some(FFIRequest_oneof_req::handleTransaction(v)) => v,
                _ => panic!(),
            }
        } else {
            TransactionData::new()
        }
    }
}

impl ::protobuf::Message for FFIRequest {
    fn is_initialized(&self) -> bool {
        if let Some(FFIRequest_oneof_req::handleTransaction(ref v)) = self.req {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.req = ::std::option::Option::Some(FFIRequest_oneof_req::handleTransaction(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.req {
            match v {
                &FFIRequest_oneof_req::handleTransaction(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.req {
            match v {
                &FFIRequest_oneof_req::handleTransaction(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FFIRequest {
        FFIRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, TransactionData>(
                "handleTransaction",
                FFIRequest::has_handleTransaction,
                FFIRequest::get_handleTransaction,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FFIRequest>(
                "FFIRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FFIRequest {
        static instance: ::protobuf::rt::LazyV2<FFIRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FFIRequest::new)
    }
}

impl ::protobuf::Clear for FFIRequest {
    fn clear(&mut self) {
        self.req = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FFIRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FFIRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\tffi.proto\x12\x07ffi.ffi\"L\n\x0eAccessListItem\x12\x20\n\x0bstorage\
    Slot\x18\x01\x20\x03(\x0cR\x0bstorageSlot\x12\x18\n\x07address\x18\x02\
    \x20\x01(\x0cR\x07address\"\xb4\x01\n\x0fTransactionData\x12\x12\n\x04fr\
    om\x18\x01\x20\x01(\x0cR\x04from\x12\x0e\n\x02to\x18\x02\x20\x01(\x0cR\
    \x02to\x12\x12\n\x04data\x18\x03\x20\x01(\x0cR\x04data\x12\x1a\n\x08gasL\
    imit\x18\x04\x20\x01(\x04R\x08gasLimit\x12\x14\n\x05value\x18\x05\x20\
    \x01(\x0cR\x05value\x127\n\naccessList\x18\x06\x20\x03(\x0b2\x17.ffi.ffi\
    .AccessListItemR\naccessList\"\x1d\n\x05Topic\x12\x14\n\x05inner\x18\x01\
    \x20\x01(\x0cR\x05inner\"[\n\x03Log\x12\x18\n\x07address\x18\x01\x20\x01\
    (\x0cR\x07address\x12&\n\x06topics\x18\x02\x20\x03(\x0b2\x0e.ffi.ffi.Top\
    icR\x06topics\x12\x12\n\x04data\x18\x03\x20\x01(\x0cR\x04data\"\x85\x01\
    \n\x19HandleTransactionResponse\x12\x20\n\x04logs\x18\x02\x20\x03(\x0b2\
    \x0c.ffi.ffi.LogR\x04logs\x12\x10\n\x03ret\x18\x03\x20\x01(\x0cR\x03ret\
    \x12\x19\n\x08vm_error\x18\x04\x20\x01(\tR\x07vmError\x12\x19\n\x08gas_u\
    sed\x18\x05\x20\x01(\x04R\x07gasUsed\"+\n\x0fQueryGetAccount\x12\x18\n\
    \x07address\x18\x01\x20\x01(\x0cR\x07address\"I\n\x17QueryGetAccountResp\
    onse\x12\x18\n\x07balance\x18\x01\x20\x01(\x0cR\x07balance\x12\x14\n\x05\
    nonce\x18\x02\x20\x01(\x0cR\x05nonce\"^\n\x12QueryInsertAccount\x12\x18\
    \n\x07address\x18\x01\x20\x01(\x0cR\x07address\x12\x18\n\x07balance\x18\
    \x02\x20\x01(\x0cR\x07balance\x12\x14\n\x05nonce\x18\x03\x20\x01(\x0cR\
    \x05nonce\"\x1c\n\x1aQueryInsertAccountResponse\"$\n\x10QueryContainsKey\
    \x12\x10\n\x03key\x18\x01\x20\x01(\x0cR\x03key\"6\n\x18QueryContainsKeyR\
    esponse\x12\x1a\n\x08contains\x18\x01\x20\x01(\x08R\x08contains\"L\n\x1a\
    QueryGetAccountStorageCell\x12\x18\n\x07address\x18\x01\x20\x01(\x0cR\
    \x07address\x12\x14\n\x05index\x18\x02\x20\x01(\x0cR\x05index\":\n\"Quer\
    yGetAccountStorageCellResponse\x12\x14\n\x05value\x18\x01\x20\x01(\x0cR\
    \x05value\"/\n\x13QueryGetAccountCode\x12\x18\n\x07address\x18\x01\x20\
    \x01(\x0cR\x07address\"1\n\x1bQueryGetAccountCodeResponse\x12\x12\n\x04c\
    ode\x18\x01\x20\x01(\x0cR\x04code\"F\n\x16QueryInsertAccountCode\x12\x18\
    \n\x07address\x18\x01\x20\x01(\x0cR\x07address\x12\x12\n\x04code\x18\x02\
    \x20\x01(\x0cR\x04code\"\x20\n\x1eQueryInsertAccountCodeResponse\"^\n\
    \x16QueryInsertStorageCell\x12\x18\n\x07address\x18\x01\x20\x01(\x0cR\
    \x07address\x12\x14\n\x05index\x18\x02\x20\x01(\x0cR\x05index\x12\x14\n\
    \x05value\x18\x03\x20\x01(\x0cR\x05value\"\x20\n\x1eQueryInsertStorageCe\
    llResponse\"'\n\x0bQueryRemove\x12\x18\n\x07address\x18\x01\x20\x01(\x0c\
    R\x07address\"\x15\n\x13QueryRemoveResponse\"H\n\x16QueryRemoveStorageCe\
    ll\x12\x18\n\x07address\x18\x01\x20\x01(\x0cR\x07address\x12\x14\n\x05in\
    dex\x18\x02\x20\x01(\x0cR\x05index\"\x20\n\x1eQueryRemoveStorageCellResp\
    onse\".\n\x12QueryRemoveStorage\x12\x18\n\x07address\x18\x01\x20\x01(\
    \x0cR\x07address\"\x1c\n\x1aQueryRemoveStorageResponse\"(\n\x0eQueryBloc\
    kHash\x12\x16\n\x06number\x18\x01\x20\x01(\x0cR\x06number\",\n\x16QueryB\
    lockHashResponse\x12\x12\n\x04hash\x18\x01\x20\x01(\x0cR\x04hash\"\x12\n\
    \x10QueryBlockNumber\"2\n\x18QueryBlockNumberResponse\x12\x16\n\x06numbe\
    r\x18\x01\x20\x01(\x0cR\x06number\"\x15\n\x13QueryBlockTimestamp\";\n\
    \x1bQueryBlockTimestampResponse\x12\x1c\n\ttimestamp\x18\x01\x20\x01(\
    \x0cR\ttimestamp\"\x0e\n\x0cQueryChainId\"1\n\x14QueryChainIdResponse\
    \x12\x19\n\x08chain_id\x18\x01\x20\x01(\x0cR\x07chainId\"\xbc\x07\n\rCos\
    mosRequest\x12:\n\ngetAccount\x18\x01\x20\x01(\x0b2\x18.ffi.ffi.QueryGet\
    AccountH\0R\ngetAccount\x12C\n\rinsertAccount\x18\x02\x20\x01(\x0b2\x1b.\
    ffi.ffi.QueryInsertAccountH\0R\rinsertAccount\x12=\n\x0bcontainsKey\x18\
    \x03\x20\x01(\x0b2\x19.ffi.ffi.QueryContainsKeyH\0R\x0bcontainsKey\x12@\
    \n\x0baccountCode\x18\x04\x20\x01(\x0b2\x1c.ffi.ffi.QueryGetAccountCodeH\
    \0R\x0baccountCode\x12G\n\x0bstorageCell\x18\x05\x20\x01(\x0b2#.ffi.ffi.\
    QueryGetAccountStorageCellH\0R\x0bstorageCell\x12O\n\x11insertAccountCod\
    e\x18\x06\x20\x01(\x0b2\x1f.ffi.ffi.QueryInsertAccountCodeH\0R\x11insert\
    AccountCode\x12O\n\x11insertStorageCell\x18\x07\x20\x01(\x0b2\x1f.ffi.ff\
    i.QueryInsertStorageCellH\0R\x11insertStorageCell\x12.\n\x06remove\x18\
    \x08\x20\x01(\x0b2\x14.ffi.ffi.QueryRemoveH\0R\x06remove\x12O\n\x11remov\
    eStorageCell\x18\t\x20\x01(\x0b2\x1f.ffi.ffi.QueryRemoveStorageCellH\0R\
    \x11removeStorageCell\x12C\n\rremoveStorage\x18\n\x20\x01(\x0b2\x1b.ffi.\
    ffi.QueryRemoveStorageH\0R\rremoveStorage\x127\n\tblockHash\x18\x0b\x20\
    \x01(\x0b2\x17.ffi.ffi.QueryBlockHashH\0R\tblockHash\x12=\n\x0bblockNumb\
    er\x18\x0c\x20\x01(\x0b2\x19.ffi.ffi.QueryBlockNumberH\0R\x0bblockNumber\
    \x12F\n\x0eblockTimestamp\x18\r\x20\x01(\x0b2\x1c.ffi.ffi.QueryBlockTime\
    stampH\0R\x0eblockTimestamp\x121\n\x07chainId\x18\x0e\x20\x01(\x0b2\x15.\
    ffi.ffi.QueryChainIdH\0R\x07chainIdB\x05\n\x03req\"]\n\nFFIRequest\x12H\
    \n\x11handleTransaction\x18\x01\x20\x01(\x0b2\x18.ffi.ffi.TransactionDat\
    aH\0R\x11handleTransactionB\x05\n\x03reqB\x04Z\x02./b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
