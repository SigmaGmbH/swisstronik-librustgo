#![cfg_attr(not(feature = "std"), no_std)]

#[cfg(not(feature = "std"))]
#[macro_use]
extern crate sgx_tstd as std;

mod backend;
mod errors;
pub mod primitives;
pub mod storage;
mod precompiles;

pub use evm;
pub use primitive_types;
pub use ethereum;
pub use crate::backend::Vicinity;
use crate::backend::{Backend, GASOMETER_CONFIG};
use crate::primitives::{raw_transaction::FullTransactionData, QueryData};
use crate::storage::Storage;
use crate::precompiles::EVMPrecompiles;

use primitive_types::{U256, H160, H256};
use common_types::ExecutionResult;
use ethereum::TransactionAction;
use evm::backend::ApplyBackend;
use evm::executor::stack::{MemoryStackState, StackExecutor, StackSubstateMetadata};
use evm::ExitReason;
use rlp::Encodable;
use std::{collections::BTreeMap, string::String, string::ToString, vec::Vec};

/// This struct contaisn all the data that need for execution
pub struct ExecutionData {
    pub origin: H160,
    pub action: TransactionAction,
    pub input: Vec<u8>,
    pub gas_limit: U256,
    pub value: U256,
    pub access_list: Vec<(H160, Vec<H256>)>,
}

impl From<FullTransactionData> for ExecutionData {
    fn from(data: FullTransactionData) -> Self {
        ExecutionData {
            origin: data.origin,
            action: data.action,
            input: data.input,
            gas_limit: data.gas_limit,
            value: data.value,
            access_list: data.access_list,
        }
    }
}

/// Handles query to smart contract or executes transaction in simulation mode
/// This method does not change state of blockchain
/// Returns RLP-encoded execution result
pub fn handle_query(body: &[u8], storage: &mut dyn Storage) -> Vec<u8> {
    let query = match rlp::decode::<QueryData>(body) {
        Ok(query) => query,
        Err(e) => {
            return ExecutionResult::from_error(format!("Cannot decode query data: {:?}", e), None)
                .rlp_bytes()
                .to_vec();
        }
    };

    let res = handle_query_inner(query, storage);
    res.rlp_bytes().to_vec()
}


/// Handles incoming RLP-encoded (raw) ethereum transaction
/// * body – RLP-encoded transaction
/// * storage – implementation of trait `Storage`
/// Returns RLP-encoded execution result or an error
pub fn handle_transaction(body: &[u8], storage: &mut dyn Storage) -> Vec<u8> { // TODO: Pass backend instead of storage
    // Recover transaction data
    let transaction_data = match FullTransactionData::decode_transaction(body) {
        Ok(data) => data,
        Err(e) => {
            return ExecutionResult::from_error(
                format!("Cannot decode transaction: {:?}", e),
                None,
            )
            .rlp_bytes()
            .to_vec();
        }
    };

    let execution_data = ExecutionData::from(transaction_data);
    let res = handle_transaction_inner(execution_data, storage);
    res.rlp_bytes().to_vec()
}

/// Handles EVM query
pub fn handle_query_inner(query: QueryData, storage: &mut dyn Storage) -> ExecutionResult {
    let vicinity = Vicinity {
        origin: query.from,
    };

    let backend = Backend {
        vicinity,
        state: storage,
        logs: Vec::default(),
    };

    let metadata = StackSubstateMetadata::new(u64::MAX, &GASOMETER_CONFIG);
    let state = MemoryStackState::new(metadata, &backend);
    let precompiles = BTreeMap::new();

    let mut executor = StackExecutor::new_with_precompiles(state, &GASOMETER_CONFIG, &precompiles);

    let (exit_reason, data) = executor.transact_call(
        query.from,
        query.to,
        query.value,
        query.data,
        query.gas.as_u64(),
        Default::default(),
    );

    // Handle the results of the transaction
    let used_gas = executor.used_gas();
    let exit_value = match handle_evm_result(exit_reason, data) {
        Ok(data) => data,
        Err(err) => {
            return ExecutionResult::from_error(err, Some(used_gas));
        }
    };

    ExecutionResult {
        logs: backend.logs.clone(),
        data: exit_value,
        gas_used: used_gas,
        vm_error: "".to_string()
    }
}

/// Handles EVM transaction
pub fn handle_transaction_inner(transaction_data: ExecutionData, storage: &mut dyn Storage) -> ExecutionResult {
    // Prepare environment
    let vicinity = Vicinity {
        origin: transaction_data.origin,
    };
    let mut backend = Backend {
        vicinity,
        state: storage,
        logs: Vec::default(),
    };
    let metadata = StackSubstateMetadata::new(u64::MAX, &GASOMETER_CONFIG);
    let state = MemoryStackState::new(metadata, &backend);
	let precompiles = EVMPrecompiles::<Backend>::new();

    let mut executor = StackExecutor::new_with_precompiles(state, &GASOMETER_CONFIG, &precompiles);
    executor.initialize_with_access_list(transaction_data.access_list.clone());

    let (exit_reason, data) = match transaction_data.action {
        TransactionAction::Call(destination) => executor.transact_call(
            transaction_data.origin,
            destination,
            transaction_data.value,
            transaction_data.input,
            transaction_data.gas_limit.as_u64(),
            transaction_data.access_list,
        ),
        TransactionAction::Create => {
            let address = executor.create_address(evm::CreateScheme::Legacy {
                caller: transaction_data.origin,
            });

            let (exit_reason, exit_value) = executor.transact_create(
                transaction_data.origin,
                transaction_data.value,
                transaction_data.input,
                transaction_data.gas_limit.as_u64(),
                transaction_data.access_list,
            );

            if exit_reason.is_succeed() {
                // If successful return the contract deployed address
                (exit_reason, address.as_bytes().to_vec())
            } else {
                // Otherwise propagate the exit value
                (exit_reason, exit_value)
            }
        }
    };

    // Handle the results of the transaction
    let gas_used = executor.used_gas();
    let exit_value = match handle_evm_result(exit_reason, data) {
        Ok(data) => data,
        Err(err) => {
            return ExecutionResult::from_error(err, Some(gas_used))
        }
    };

    // Update state
    let (vals, logs) = executor.into_state().deconstruct();
    backend.apply(vals, logs, false);

    ExecutionResult {
        logs: backend.logs.clone(),
        data: exit_value,
        gas_used,
        vm_error: "".to_string(),
    }
}

/// Handles an EVM result to return either a successful result or a (readable) error reason.
fn handle_evm_result(exit_reason: ExitReason, data: Vec<u8>) -> Result<Vec<u8>, String> {
    match exit_reason {
        ExitReason::Succeed(_) => Ok(data),
        ExitReason::Revert(_) => {
            if data.is_empty() {
                return Err("no revert reason".to_string());
            }

            // Decode revert reason, format is as follows:
            //
            // 08c379a0                                                         <- Function selector
            // 0000000000000000000000000000000000000000000000000000000000000020 <- Offset of string return value
            // 0000000000000000000000000000000000000000000000000000000000000047 <- Length of string return value (the revert reason)
            // 6d7946756e6374696f6e206f6e6c79206163636570747320617267756d656e74 <- First 32 bytes of the revert reason
            // 7320776869636820617265206772656174686572207468616e206f7220657175 <- Next 32 bytes of the revert reason
            // 616c20746f203500000000000000000000000000000000000000000000000000 <- Last 7 bytes of the revert reason
            //
            const ERROR_STRING_SELECTOR: &[u8] = &[0x08, 0xc3, 0x79, 0xa0]; // Keccak256("Error(string)")
            const FIELD_OFFSET_START: usize = 4;
            const FIELD_LENGTH_START: usize = FIELD_OFFSET_START + 32;
            const FIELD_REASON_START: usize = FIELD_LENGTH_START + 32;
            const MIN_SIZE: usize = FIELD_REASON_START;
            const MAX_REASON_SIZE: usize = 1024;

            let max_raw_len = if data.len() > MAX_REASON_SIZE {
                MAX_REASON_SIZE
            } else {
                data.len()
            };
            if data.len() < MIN_SIZE || !data.starts_with(ERROR_STRING_SELECTOR) {
                return Err(format!(
                    "invalid reason prefix: '{}'",
                    hex::encode(&data[..max_raw_len])
                ));
            }
            // Decode and validate length.
            let mut length =
                primitive_types::U256::from(&data[FIELD_LENGTH_START..FIELD_LENGTH_START + 32])
                    .low_u32() as usize;
            if FIELD_REASON_START + length > data.len() {
                return Err(format!(
                    "invalid reason length: '{}'",
                    hex::encode(&data[..max_raw_len])
                ));
            }
            // Make sure that this doesn't ever return huge reason values as this is at least
            // somewhat contract-controlled.
            if length > MAX_REASON_SIZE {
                length = MAX_REASON_SIZE;
            }
            let reason = std::string::String::from_utf8_lossy(
                &data[FIELD_REASON_START..FIELD_REASON_START + length],
            );
            Err(reason.to_string())
        }
        ExitReason::Error(err) => Err(format!("evm error: {:?}", err)),
        ExitReason::Fatal(err) => Err(format!("fatal evm error: {:?}", err)),
    }
}

#[cfg(test)]
mod tests {
    use core::str::FromStr;
    use primitive_types::{H160, U256};
    use crate::{handle_transaction_inner, handle_query_inner};
    use crate::primitives::QueryData;
    use crate::storage::mocked_storage::MockedStorage;
    use crate::primitives::raw_transaction::FullTransactionData;

    const EXPECTED_ADDRESS: &str = "35600a78c4ad0deb35378a11c59cd2b4b2cfd4a1";

    #[test]
    fn test_deploy_contract() {
        let mut storage = MockedStorage::default();

        let deployment_transaction = hex::decode(
            "f9099c808502540be4008401312d008080b90948608060405234801561001057600080fd5b50610928806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80639b0b0fda116100715780639b0b0fda14610178578063a26388bb14610194578063c6888fa11461019e578063d09de08a146101ce578063e12ed13c146101d8578063f68016b7146101f6576100a9565b80633fa4f245146100ae5780634ba664e7146100cc5780638361ff9c146100fc57806385df51fd1461012c5780638b80bfa31461015c575b600080fd5b6100b6610214565b6040516100c3919061061e565b60405180910390f35b6100e660048036038101906100e19190610431565b61021a565b6040516100f391906105c3565b60405180910390f35b610116600480360381019061011191906104fa565b610225565b604051610123919061061e565b60405180910390f35b610146600480360381019061014191906104fa565b610273565b60405161015391906105c3565b60405180910390f35b6101766004803603810190610171919061049e565b61027e565b005b610192600480360381019061018d919061045e565b6102d5565b005b61019c6102dc565b005b6101b860048036038101906101b391906104fa565b61031f565b6040516101c5919061061e565b60405180910390f35b6101d6610335565b005b6101e0610387565b6040516101ed919061061e565b60405180910390f35b6101fe61038f565b60405161020b919061061e565b60405180910390f35b60005481565b600081549050919050565b6000600a82111561026b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610262906105fe565b60405180910390fd5b819050919050565b600081409050919050565b6000818351602085016000f59050803b61029757600080fd5b7fb03c53b28e78a88e31607a27e1fa48234dce28d5d9d9ec7b295aeb02e674a1e181836040516102c892919061059a565b60405180910390a1505050565b8082555050565b6102e4610335565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610316906105de565b60405180910390fd5b600060078261032e91906106a0565b9050919050565b60008081548092919061034790610780565b91905055507f20d8a6f5a693f9d1d627a598e8820f7a55ee74c183aa8f1a30e8d4e8dd9a8d8460005460405161037d919061061e565b60405180910390a1565b600043905090565b600045905090565b60006103aa6103a58461065e565b610639565b9050828152602081018484840111156103c6576103c561082c565b5b6103d1848285610740565b509392505050565b6000813590506103e8816108c4565b92915050565b600082601f83011261040357610402610827565b5b8135610413848260208601610397565b91505092915050565b60008135905061042b816108db565b92915050565b60006020828403121561044757610446610836565b5b6000610455848285016103d9565b91505092915050565b6000806040838503121561047557610474610836565b5b6000610483858286016103d9565b9250506020610494858286016103d9565b9150509250929050565b600080604083850312156104b5576104b4610836565b5b600083013567ffffffffffffffff8111156104d3576104d2610831565b5b6104df858286016103ee565b92505060206104f08582860161041c565b9150509250929050565b6000602082840312156105105761050f610836565b5b600061051e8482850161041c565b91505092915050565b610530816106fa565b82525050565b61053f8161070c565b82525050565b6000610552600c8361068f565b915061055d8261084c565b602082019050919050565b600061057560228361068f565b915061058082610875565b604082019050919050565b61059481610736565b82525050565b60006040820190506105af6000830185610527565b6105bc602083018461058b565b9392505050565b60006020820190506105d86000830184610536565b92915050565b600060208201905081810360008301526105f781610545565b9050919050565b6000602082019050818103600083015261061781610568565b9050919050565b6000602082019050610633600083018461058b565b92915050565b6000610643610654565b905061064f828261074f565b919050565b6000604051905090565b600067ffffffffffffffff821115610679576106786107f8565b5b6106828261083b565b9050602081019050919050565b600082825260208201905092915050565b60006106ab82610736565b91506106b683610736565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156106ef576106ee6107c9565b5b828202905092915050565b600061070582610716565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b6107588261083b565b810181811067ffffffffffffffff82111715610777576107766107f8565b5b80604052505050565b600061078b82610736565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156107be576107bd6107c9565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4445425547205245564552540000000000000000000000000000000000000000600082015250565b7f56616c7565206d757374206e6f742062652067726561746572207468616e203160008201527f302e000000000000000000000000000000000000000000000000000000000000602082015250565b6108cd8161070c565b81146108d857600080fd5b50565b6108e481610736565b81146108ef57600080fd5b5056fea2646970667358221220ede6b60627ef5c82211269c6cd3c7feb79858b894ad40eab802c329451364b3f64736f6c6343000807003326a0bcffb38697f909e7e259f4d70bfa6c982f8774047c27468ff6253b72b58f132ea04f32c7265fbfee33b8e16b3d46f4d0e582f85a9a274b0c77f302d6428342e77d"
        ).unwrap();

        let tx_data = FullTransactionData::decode_transaction(&deployment_transaction).unwrap();
        let result = handle_transaction_inner(tx_data, &mut storage);

        // Should correctly deploy contract and returns address of the deployed contract
        assert!(result.errors.is_empty());
        assert_eq!(hex::encode(&result.data), EXPECTED_ADDRESS);
    }

    #[test]
    fn test_interact_with_contract() {
        let mut storage = MockedStorage::default();

        // Deploy contract
        let deployment_transaction = hex::decode(
            "f9099c808502540be4008401312d008080b90948608060405234801561001057600080fd5b50610928806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80639b0b0fda116100715780639b0b0fda14610178578063a26388bb14610194578063c6888fa11461019e578063d09de08a146101ce578063e12ed13c146101d8578063f68016b7146101f6576100a9565b80633fa4f245146100ae5780634ba664e7146100cc5780638361ff9c146100fc57806385df51fd1461012c5780638b80bfa31461015c575b600080fd5b6100b6610214565b6040516100c3919061061e565b60405180910390f35b6100e660048036038101906100e19190610431565b61021a565b6040516100f391906105c3565b60405180910390f35b610116600480360381019061011191906104fa565b610225565b604051610123919061061e565b60405180910390f35b610146600480360381019061014191906104fa565b610273565b60405161015391906105c3565b60405180910390f35b6101766004803603810190610171919061049e565b61027e565b005b610192600480360381019061018d919061045e565b6102d5565b005b61019c6102dc565b005b6101b860048036038101906101b391906104fa565b61031f565b6040516101c5919061061e565b60405180910390f35b6101d6610335565b005b6101e0610387565b6040516101ed919061061e565b60405180910390f35b6101fe61038f565b60405161020b919061061e565b60405180910390f35b60005481565b600081549050919050565b6000600a82111561026b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610262906105fe565b60405180910390fd5b819050919050565b600081409050919050565b6000818351602085016000f59050803b61029757600080fd5b7fb03c53b28e78a88e31607a27e1fa48234dce28d5d9d9ec7b295aeb02e674a1e181836040516102c892919061059a565b60405180910390a1505050565b8082555050565b6102e4610335565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610316906105de565b60405180910390fd5b600060078261032e91906106a0565b9050919050565b60008081548092919061034790610780565b91905055507f20d8a6f5a693f9d1d627a598e8820f7a55ee74c183aa8f1a30e8d4e8dd9a8d8460005460405161037d919061061e565b60405180910390a1565b600043905090565b600045905090565b60006103aa6103a58461065e565b610639565b9050828152602081018484840111156103c6576103c561082c565b5b6103d1848285610740565b509392505050565b6000813590506103e8816108c4565b92915050565b600082601f83011261040357610402610827565b5b8135610413848260208601610397565b91505092915050565b60008135905061042b816108db565b92915050565b60006020828403121561044757610446610836565b5b6000610455848285016103d9565b91505092915050565b6000806040838503121561047557610474610836565b5b6000610483858286016103d9565b9250506020610494858286016103d9565b9150509250929050565b600080604083850312156104b5576104b4610836565b5b600083013567ffffffffffffffff8111156104d3576104d2610831565b5b6104df858286016103ee565b92505060206104f08582860161041c565b9150509250929050565b6000602082840312156105105761050f610836565b5b600061051e8482850161041c565b91505092915050565b610530816106fa565b82525050565b61053f8161070c565b82525050565b6000610552600c8361068f565b915061055d8261084c565b602082019050919050565b600061057560228361068f565b915061058082610875565b604082019050919050565b61059481610736565b82525050565b60006040820190506105af6000830185610527565b6105bc602083018461058b565b9392505050565b60006020820190506105d86000830184610536565b92915050565b600060208201905081810360008301526105f781610545565b9050919050565b6000602082019050818103600083015261061781610568565b9050919050565b6000602082019050610633600083018461058b565b92915050565b6000610643610654565b905061064f828261074f565b919050565b6000604051905090565b600067ffffffffffffffff821115610679576106786107f8565b5b6106828261083b565b9050602081019050919050565b600082825260208201905092915050565b60006106ab82610736565b91506106b683610736565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156106ef576106ee6107c9565b5b828202905092915050565b600061070582610716565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b6107588261083b565b810181811067ffffffffffffffff82111715610777576107766107f8565b5b80604052505050565b600061078b82610736565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156107be576107bd6107c9565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4445425547205245564552540000000000000000000000000000000000000000600082015250565b7f56616c7565206d757374206e6f742062652067726561746572207468616e203160008201527f302e000000000000000000000000000000000000000000000000000000000000602082015250565b6108cd8161070c565b81146108d857600080fd5b50565b6108e481610736565b81146108ef57600080fd5b5056fea2646970667358221220ede6b60627ef5c82211269c6cd3c7feb79858b894ad40eab802c329451364b3f64736f6c6343000807003326a0bcffb38697f909e7e259f4d70bfa6c982f8774047c27468ff6253b72b58f132ea04f32c7265fbfee33b8e16b3d46f4d0e582f85a9a274b0c77f302d6428342e77d"
        ).unwrap();

        let tx_data = FullTransactionData::decode_transaction(&deployment_transaction).unwrap();
        handle_transaction_inner(tx_data, &mut storage);

        // Get `value` before increment
        let query_data = QueryData {
            from: H160::from_str("11600a78c4ad0deb35378a11c59cd2b4b2cfd0a0").unwrap(),
            to: H160::from_str(EXPECTED_ADDRESS).unwrap(),
            gas: U256::from_dec_str("1000000000").unwrap(),
            gas_price: U256::zero(),
            value: U256::zero(),
            data: hex::decode("3fa4f245").unwrap(), // Call to `value` method
        };
        let res = handle_query_inner(query_data.clone(), &mut storage);
        let counter_before = U256::from_big_endian(&res.data);

        // Call `increment` method
        let increment_transaction = hex::decode(
            "f86a808502540be4008401312d009435600a78c4ad0deb35378a11c59cd2b4b2cfd4a18084d09de08a25a0c534555aca06af2c694386011e0c24a179386aa068429491cba065f36e806ab2a0336d550ddaff20a67674bd5b16f60582122de9bcd5050a82b6a1a77467ed6ea8"
        ).unwrap();
        let tx_data = FullTransactionData::decode_transaction(&increment_transaction).unwrap();
        let result = handle_transaction_inner(tx_data, &mut storage);

        // Get `value` after increment
        let res = handle_query_inner(query_data.clone(), &mut storage);
        let counter_after = U256::from_big_endian(&res.data);

        assert!(result.errors.is_empty());
        assert_eq!(counter_before + 1, counter_after);
    }

    #[test]
    fn test_revert_with_message() {
        let mut storage = MockedStorage::default();

        // Deploy contract
        let deployment_transaction = hex::decode(
            "f9099c808502540be4008401312d008080b90948608060405234801561001057600080fd5b50610928806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80639b0b0fda116100715780639b0b0fda14610178578063a26388bb14610194578063c6888fa11461019e578063d09de08a146101ce578063e12ed13c146101d8578063f68016b7146101f6576100a9565b80633fa4f245146100ae5780634ba664e7146100cc5780638361ff9c146100fc57806385df51fd1461012c5780638b80bfa31461015c575b600080fd5b6100b6610214565b6040516100c3919061061e565b60405180910390f35b6100e660048036038101906100e19190610431565b61021a565b6040516100f391906105c3565b60405180910390f35b610116600480360381019061011191906104fa565b610225565b604051610123919061061e565b60405180910390f35b610146600480360381019061014191906104fa565b610273565b60405161015391906105c3565b60405180910390f35b6101766004803603810190610171919061049e565b61027e565b005b610192600480360381019061018d919061045e565b6102d5565b005b61019c6102dc565b005b6101b860048036038101906101b391906104fa565b61031f565b6040516101c5919061061e565b60405180910390f35b6101d6610335565b005b6101e0610387565b6040516101ed919061061e565b60405180910390f35b6101fe61038f565b60405161020b919061061e565b60405180910390f35b60005481565b600081549050919050565b6000600a82111561026b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610262906105fe565b60405180910390fd5b819050919050565b600081409050919050565b6000818351602085016000f59050803b61029757600080fd5b7fb03c53b28e78a88e31607a27e1fa48234dce28d5d9d9ec7b295aeb02e674a1e181836040516102c892919061059a565b60405180910390a1505050565b8082555050565b6102e4610335565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610316906105de565b60405180910390fd5b600060078261032e91906106a0565b9050919050565b60008081548092919061034790610780565b91905055507f20d8a6f5a693f9d1d627a598e8820f7a55ee74c183aa8f1a30e8d4e8dd9a8d8460005460405161037d919061061e565b60405180910390a1565b600043905090565b600045905090565b60006103aa6103a58461065e565b610639565b9050828152602081018484840111156103c6576103c561082c565b5b6103d1848285610740565b509392505050565b6000813590506103e8816108c4565b92915050565b600082601f83011261040357610402610827565b5b8135610413848260208601610397565b91505092915050565b60008135905061042b816108db565b92915050565b60006020828403121561044757610446610836565b5b6000610455848285016103d9565b91505092915050565b6000806040838503121561047557610474610836565b5b6000610483858286016103d9565b9250506020610494858286016103d9565b9150509250929050565b600080604083850312156104b5576104b4610836565b5b600083013567ffffffffffffffff8111156104d3576104d2610831565b5b6104df858286016103ee565b92505060206104f08582860161041c565b9150509250929050565b6000602082840312156105105761050f610836565b5b600061051e8482850161041c565b91505092915050565b610530816106fa565b82525050565b61053f8161070c565b82525050565b6000610552600c8361068f565b915061055d8261084c565b602082019050919050565b600061057560228361068f565b915061058082610875565b604082019050919050565b61059481610736565b82525050565b60006040820190506105af6000830185610527565b6105bc602083018461058b565b9392505050565b60006020820190506105d86000830184610536565b92915050565b600060208201905081810360008301526105f781610545565b9050919050565b6000602082019050818103600083015261061781610568565b9050919050565b6000602082019050610633600083018461058b565b92915050565b6000610643610654565b905061064f828261074f565b919050565b6000604051905090565b600067ffffffffffffffff821115610679576106786107f8565b5b6106828261083b565b9050602081019050919050565b600082825260208201905092915050565b60006106ab82610736565b91506106b683610736565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156106ef576106ee6107c9565b5b828202905092915050565b600061070582610716565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b6107588261083b565b810181811067ffffffffffffffff82111715610777576107766107f8565b5b80604052505050565b600061078b82610736565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156107be576107bd6107c9565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4445425547205245564552540000000000000000000000000000000000000000600082015250565b7f56616c7565206d757374206e6f742062652067726561746572207468616e203160008201527f302e000000000000000000000000000000000000000000000000000000000000602082015250565b6108cd8161070c565b81146108d857600080fd5b50565b6108e481610736565b81146108ef57600080fd5b5056fea2646970667358221220ede6b60627ef5c82211269c6cd3c7feb79858b894ad40eab802c329451364b3f64736f6c6343000807003326a0bcffb38697f909e7e259f4d70bfa6c982f8774047c27468ff6253b72b58f132ea04f32c7265fbfee33b8e16b3d46f4d0e582f85a9a274b0c77f302d6428342e77d"
        ).unwrap();

        let tx_data = FullTransactionData::decode_transaction(&deployment_transaction).unwrap();
        handle_transaction_inner(tx_data, &mut storage);

        // Call testRevert
        let query_data = QueryData {
            from: H160::from_str("11600a78c4ad0deb35378a11c59cd2b4b2cfd0a0").unwrap(),
            to: H160::from_str(EXPECTED_ADDRESS).unwrap(),
            gas: U256::from_dec_str("1000000000").unwrap(),
            gas_price: U256::zero(),
            value: U256::zero(),
            data: hex::decode("a26388bb").unwrap(),
        };
        let res = handle_query_inner(query_data.clone(), &mut storage);
        assert_eq!(res.errors, vec!["DEBUG REVERT"]);
    }

    #[test]
    fn test_interact_with_precompile() {
        let mut storage = MockedStorage::default();

        // In this test we are using contract, that incapsulates all interactions with
        // precompiled contracts. Source code of this contract is located here: https://gist.github.com/MikkySnow/0ecbe28f96275dbb4f1869d4c0241f38

        // Deploy contract that contains all interactions with precompiles
        let deployment_transaction = hex::decode(
            ""
        ).unwrap();
        let tx_data = FullTransactionData::decode_transaction(&deployment_transaction).unwrap();
        let res = handle_transaction_inner(tx_data, &mut storage);
        assert!(res.errors.is_empty());

        // Check ecRecover
        let tx = hex::decode("f86a808502540be4008401312d009435600a78c4ad0deb35378a11c59cd2b4b2cfd4a18084d3fed2cf25a0e65df62554f1cd7540ac4d3991c32d6dbb66d8be965aeee1219f69b166bd1c2da044f90349f0f3af59e10582dbea50a057e4a64756c243effa12acd8f99a89ce82").unwrap();
        let tx_data = FullTransactionData::decode_transaction(&tx).unwrap();
        let res = handle_transaction_inner(tx_data, &mut storage);
        assert!(res.errors.is_empty());

        // Check sha256
        let tx = hex::decode("f86a808502540be4008401312d009435600a78c4ad0deb35378a11c59cd2b4b2cfd4a18084a449e8eb25a0ea8daa987c7dedea15a63fad90fde9f860365820296df8fe282564f67fabaf98a06af5388f7112f71139ad0855ac3b68824e3a40589e6c61ce7cb1743a40886bee").unwrap();
        let tx_data = FullTransactionData::decode_transaction(&tx).unwrap();
        let res = handle_transaction_inner(tx_data, &mut storage);
        assert!(res.errors.is_empty());

        // Check ripemd160
        let tx = hex::decode("f86a808502540be4008401312d009435600a78c4ad0deb35378a11c59cd2b4b2cfd4a180847ada78e326a09768e4b97d8f52b8271e99d8076fab8f0359c8e49093a67aa818dd8f150e8f4ba07b7d46104d41abb9af0ed60a61890b9484506a81cb8021e9c6d2a3026ab514c3").unwrap();
        let tx_data = FullTransactionData::decode_transaction(&tx).unwrap();
        let res = handle_transaction_inner(tx_data, &mut storage);
        assert!(res.errors.is_empty());

        // Check datacopy
        let tx = hex::decode("f86a808502540be4008401312d009435600a78c4ad0deb35378a11c59cd2b4b2cfd4a1808420e410b725a05272a8e0d2c87c9be456a5ad07d48cd99f3e31a77a37e6b4c736b323fedb2194a0587e002deb16333d6479c8841e8823946244a177aa9b09d53b785fc86b926166").unwrap();
        let tx_data = FullTransactionData::decode_transaction(&tx).unwrap();
        let res = handle_transaction_inner(tx_data, &mut storage);
        assert!(res.errors.is_empty());

        // Check modexp
        let tx = hex::decode("f86a808502540be4008401312d009435600a78c4ad0deb35378a11c59cd2b4b2cfd4a18084914991ea25a0b861083cedb3aa1ab0161e4d2f809e481d4e812d7cfd2f37031a92048d9fbb40a00c4366c2d5392eb6d4ed1f7b82e847075307f58b5376798e074f6c0d73d9bd6f").unwrap();
        let tx_data = FullTransactionData::decode_transaction(&tx).unwrap();
        let res = handle_transaction_inner(tx_data, &mut storage);
        assert!(res.errors.is_empty());

        // Check bn_add
        let tx = hex::decode("f86a808502540be4008401312d009435600a78c4ad0deb35378a11c59cd2b4b2cfd4a180845abd373126a0c45e53664360e9c16341e512ef6c5c6002caee7d71829e8ca303b55cef83acb5a05f4211d511d188c334753282fd0a0c41c28ae9a724daf64afe24b0b1503fe98d").unwrap();
        let tx_data = FullTransactionData::decode_transaction(&tx).unwrap();
        let res = handle_transaction_inner(tx_data, &mut storage);
        assert!(res.errors.is_empty());

        // Check bn_mul
        let tx = hex::decode("f86a808502540be4008401312d009435600a78c4ad0deb35378a11c59cd2b4b2cfd4a1808437e27c0c25a07a19187bc11a53f735f4f6f439eefab5601e05f066b8fcd95365b6051de799c7a01b5131b13f27c39f1e352e6750a3537fc4ce55aab13f7cdf4edb2bc9a17d086a").unwrap();
        let tx_data = FullTransactionData::decode_transaction(&tx).unwrap();
        let res = handle_transaction_inner(tx_data, &mut storage);
        assert!(res.errors.is_empty());

        // Check bn_pairing
        let tx = hex::decode("f86a808502540be4008401312d009435600a78c4ad0deb35378a11c59cd2b4b2cfd4a1808402cce72d26a043dd9474e1da37aea8ebe508170a5e73f079599a097f0cac28b45150ade6fb58a0239d1c2fe41389b1d7fdff281efded4e5de2dc0b4fe5de4926be274d510105a9").unwrap();
        let tx_data = FullTransactionData::decode_transaction(&tx).unwrap();
        let res = handle_transaction_inner(tx_data, &mut storage);
        assert!(res.errors.is_empty());

        // Check blake2f
        let tx = hex::decode("f86a808502540be4008401312d009435600a78c4ad0deb35378a11c59cd2b4b2cfd4a18084ebdab80f25a0204e2346c78779d08ad30d8dd3db7810d00e086276a73e9f26cc2969af0f6a6ea06291fcc334a0048968c4c8babe9a70d0235eec9c80a2826342e28b9f269ccda0").unwrap();
        let tx_data = FullTransactionData::decode_transaction(&tx).unwrap();
        let res = handle_transaction_inner(tx_data, &mut storage);
        assert!(res.errors.is_empty());
    }

    #[test]
    fn test_revert_correctness() {
        // This test deploys following test contract
        // pragma solidity 0.8.0;
        //
        //     contract TestRevert {
        //         uint256 public storageValue;
        //
        //         function test(bool shouldRevert) public {
        //         require(!shouldRevert, "REVERTED");
        //
        //         storageValue++;
        //     }
        // }
        let mut storage = MockedStorage::default();
        let deployment_transaction = hex::decode(
            "f902fe808502540be4008401312d008080b902aa608060405234801561001057600080fd5b5061028a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806336091dff1461003b578063a977a97314610057575b600080fd5b610055600480360381019061005091906100eb565b610075565b005b61005f6100d0565b60405161006c9190610183565b60405180910390f35b80156100b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100ad90610163565b60405180910390fd5b6000808154809291906100c8906101c5565b919050555050565b60005481565b6000813590506100e58161023d565b92915050565b6000602082840312156100fd57600080fd5b600061010b848285016100d6565b91505092915050565b600061012160088361019e565b91507f52455645525445440000000000000000000000000000000000000000000000006000830152602082019050919050565b61015d816101bb565b82525050565b6000602082019050818103600083015261017c81610114565b9050919050565b60006020820190506101986000830184610154565b92915050565b600082825260208201905092915050565b60008115159050919050565b6000819050919050565b60006101d0826101bb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156102035761020261020e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b610246816101af565b811461025157600080fd5b5056fea264697066735822122087a1507b8b493d85d53197107b8b29f7453d2056f03f8e4a20c1acf449594ae164736f6c6343000800003325a05bb456946067c4788de359fc3988e407f3d9d144982e4b5e05512687db2dfbfda044ccb5b80c7e9878eb5e4aef534684dea5573d347120673ca0c177911947cb6d"
        ).unwrap();
        let tx_data = FullTransactionData::decode_transaction(&deployment_transaction).unwrap();
        let res = handle_transaction_inner(tx_data, &mut storage);
        assert!(res.errors.is_empty());

        // Update state
        let correct_transaction = hex::decode(
            "f88a808502540be4008401312d009435600a78c4ad0deb35378a11c59cd2b4b2cfd4a180a436091dff000000000000000000000000000000000000000000000000000000000000000025a0194fc056e47ed7ce1ee881f6dddf2876f18386d23eec349e8456082fb2444a25a02d0ef9252b28ae1249e8e220cafec34d6d7f8b1fcef69ee81a617680f4f8aba4"
        ).unwrap();
        let tx_data = FullTransactionData::decode_transaction(&correct_transaction).unwrap();
        let res = handle_transaction_inner(tx_data, &mut storage);
        assert!(res.errors.is_empty());

        // Check if state was updated
        let query_data = QueryData {
            from: H160::from_str("11600a78c4ad0deb35378a11c59cd2b4b2cfd0a0").unwrap(),
            to: H160::from_str(EXPECTED_ADDRESS).unwrap(),
            gas: U256::from_dec_str("1000000000").unwrap(),
            gas_price: U256::zero(),
            value: U256::zero(),
            data: hex::decode("a977a973").unwrap(), // Call to `storageValue` method
        };
        let res = handle_query_inner(query_data.clone(), &mut storage);
        let counter_before = U256::from_big_endian(&res.data);

        // If transaction was reverted, changes should not be applied
        let transaction_to_be_reverted = hex::decode(
            "f88a808502540be4008401312d009435600a78c4ad0deb35378a11c59cd2b4b2cfd4a180a436091dff000000000000000000000000000000000000000000000000000000000000000126a05a55ea3e2f88c900aff48de48fdd85b4f09b4b5067eec61209f57dbf702eff30a060a820e6d30da806ed5a2c428049290ab2b298306a68cd04790328f29bb62074"
        ).unwrap();
        let tx_data = FullTransactionData::decode_transaction(&transaction_to_be_reverted).unwrap();
        let res = handle_transaction_inner(tx_data, &mut storage);
        let expected_error = "REVERTED".to_string();
        assert!(res.errors.contains(&expected_error));

        // Check if state was updated
        let query_data = QueryData {
            from: H160::from_str("11600a78c4ad0deb35378a11c59cd2b4b2cfd0a0").unwrap(),
            to: H160::from_str(EXPECTED_ADDRESS).unwrap(),
            gas: U256::from_dec_str("1000000000").unwrap(),
            gas_price: U256::zero(),
            value: U256::zero(),
            data: hex::decode("a977a973").unwrap(), // Call to `storageValue` method
        };
        let res = handle_query_inner(query_data.clone(), &mut storage);
        let counter_after = U256::from_big_endian(&res.data);
        assert_eq!(counter_before, counter_after);
    }

    #[test]
    fn test_interact_between_two_contracts() {
        // This contract deploys two following test contracts
        // pragma solidity 0.8.0;
        // contract A {
        //     uint256 public storageValue;
        //
        //         function increment() external {
        //         storageValue++;
        //     }
        // }
        //
        // contract B {
        //     A public otherContractAddress;
        //
        //     constructor(address _otherContractAddress) {
        //          otherContractAddress = A(_otherContractAddress);
        //     }
        //
        //     function test() public {
        //          otherContractAddress.increment();
        //     }
        // }
        // Deploy contracts A and B
        let mut storage = MockedStorage::default();
        let a_deployment_tx = hex::decode(
            "f901d8808502540be4008401312d008080b90184608060405234801561001057600080fd5b50610164806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063a977a9731461003b578063d09de08a14610059575b600080fd5b610043610063565b6040516100509190610091565b60405180910390f35b610061610069565b005b60005481565b60008081548092919061007b906100b6565b9190505550565b61008b816100ac565b82525050565b60006020820190506100a66000830184610082565b92915050565b6000819050919050565b60006100c1826100ac565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156100f4576100f36100ff565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea2646970667358221220b50a2207ec22f7cc9662f2ec3637b949007e24d6a63063c9174a95c67fa8f80564736f6c6343000800003325a0263d06c5009b1d60e3f3d0f963fa7e4a7e6a65840b819ed208fbb311f58f19a9a06b1e264568015c3cf08ece4e47889bba7ec6af1f046b6e576382d9bb75ed13a2"
        ).unwrap();
        let b_deployment_tx = hex::decode(
            "f9032f808502540be4008401312d008080b902db608060405234801561001057600080fd5b506040516102bb3803806102bb8339818101604052810190610032919061008d565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506100ff565b600081519050610087816100e8565b92915050565b60006020828403121561009f57600080fd5b60006100ad84828501610078565b91505092915050565b60006100c1826100c8565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6100f1816100b6565b81146100fc57600080fd5b50565b6101ad8061010e6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063c0a15e991461003b578063f8a8fd6d14610059575b600080fd5b610043610063565b6040516100509190610118565b60405180910390f35b610061610087565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d09de08a6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156100ef57600080fd5b505af1158015610103573d6000803e3d6000fd5b50505050565b61011281610153565b82525050565b600060208201905061012d6000830184610109565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061015e82610165565b9050919050565b600061017082610133565b905091905056fea26469706673582212203c9046d36b72a0ee17609736fc955b2eded00fb18ee2a68d3cd1b2788244f23264736f6c6343000800003300000000000000000000000035600a78c4ad0deb35378a11c59cd2b4b2cfd4a126a08d0f112d2117cef18455cca0d20f7ac8fa7e3ad6bb9ee8e70c88a84d11074d30a044a21a38948b39b5e6f4ce05ebc8f0c2fa6cb54d75aaef45502900a312f0b0c9"
        ).unwrap();
        let tx_data = FullTransactionData::decode_transaction(&a_deployment_tx).unwrap();
        let res = handle_transaction_inner(tx_data, &mut storage);
        assert!(res.errors.is_empty());
        let tx_data = FullTransactionData::decode_transaction(&b_deployment_tx).unwrap();
        let res = handle_transaction_inner(tx_data, &mut storage);
        assert!(res.errors.is_empty());

        let query_data = QueryData {
            from: H160::from_str("11600a78c4ad0deb35378a11c59cd2b4b2cfd0a0").unwrap(),
            to: H160::from_str(EXPECTED_ADDRESS).unwrap(),
            gas: U256::from_dec_str("1000000000").unwrap(),
            gas_price: U256::zero(),
            value: U256::zero(),
            data: hex::decode("a977a973").unwrap(), // Call to `storageValue` method
        };
        let res = handle_query_inner(query_data.clone(), &mut storage);
        let counter_before = U256::from_big_endian(&res.data);

        // Call `test` method at contract `B` that increments `storageValue` at contract `A`
        let inter_contract_tx = hex::decode(
            "f86a808502540be4008401312d0094254bb6395ad1da6858e3bfa3ac5e0258c3df995e8084f8a8fd6d25a01dfe0d3e44c65cf5878c3d0b5e06a570dcf90d8a5276378ca9e3148002790a91a006ce251f3a1dfc09e802d4e9741c9e5a0f475fdcc7b790c9d85448552861f466"
        ).unwrap();
        let tx_data = FullTransactionData::decode_transaction(&inter_contract_tx).unwrap();
        let res = handle_transaction_inner(tx_data, &mut storage);
        assert!(res.errors.is_empty());

        let query_data = QueryData {
            from: H160::from_str("11600a78c4ad0deb35378a11c59cd2b4b2cfd0a0").unwrap(),
            to: H160::from_str(EXPECTED_ADDRESS).unwrap(),
            gas: U256::from_dec_str("1000000000").unwrap(),
            gas_price: U256::zero(),
            value: U256::zero(),
            data: hex::decode("a977a973").unwrap(), // Call to `storageValue` method
        };
        let res = handle_query_inner(query_data.clone(), &mut storage);
        let counter_after = U256::from_big_endian(&res.data);

        assert_eq!(counter_before + 1, counter_after);
    }
}
