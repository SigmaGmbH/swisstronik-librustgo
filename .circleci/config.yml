version: 2

jobs:
  sanity:
    docker:
      # We don't use this Rust version but need an image with a Rust environment
      - image: circleci/rust:1.47.0-buster
    steps:
      - checkout
      - run:
          name: Install shellcheck
          command: sudo apt install shellcheck
      - run:
          name: Setup Rust toolchain from ./rust-toolchain
          command: echo "RUSTUP_TOOLCHAIN=$RUSTUP_TOOLCHAIN" && rustup show
      - run:
          name: Show version information
          command: rustc --version; cargo --version; rustup --version
      - run:
          name: Add Rust components
          command: rustup component add clippy rustfmt
      - run:
          name: Check formatting
          command: cargo fmt -- --check
      - run:
          name: Run linter
          command: cargo clippy -- -D warnings
      - run:
          name: Run shellcheck
          command: find . -name "*.sh" -exec shellcheck {} +

  build_libwasmvm:
    docker:
      # We don't use this Rust version but need an image with a Rust environment
      - image: circleci/rust:1.47.0-buster
    steps:
      - checkout
      - run:
          name: Setup Rust toolchain from ./rust-toolchain
          command: echo "RUSTUP_TOOLCHAIN=$RUSTUP_TOOLCHAIN" && rustup show
      - run:
          name: Show version information
          command: rustc --version; cargo --version; rustup --version
      - run:
          name: Run tests
          command: cargo test
      - run:
          name: Create release build of libwasmvm
          command: make build-rust
      - persist_to_workspace:
          root: ./api
          paths:
            - libwasmvm.so

  test:
    working_directory: /go/src/github.com/CosmWasm/wasmvm
    docker:
      - image: circleci/golang:1.14
    environment:
      GORACE: "halt_on_error=1"
      BUILD_VERSION: $(echo ${CIRCLE_SHA1} | cut -c 1-10)
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/builds
      - run: cp /tmp/builds/libwasmvm.so ./api
      - run:
          name: Go integration tests
          command: make test
      - run:
          name: Go tests with cgo and race condition safety checks
          command: make test-safety
      - run: make build-go

  test_alpine_build:
    machine:
      image: ubuntu-1604:202010-01
    steps:
      - add_ssh_keys:
          fingerprints:
            - "31:de:e5:84:1b:12:81:94:aa:06:50:c0:cb:bd:79:f0"
      - checkout
      - run: make test-alpine
      - run:
          name: Debug build results
          command: ls -l ./api

  deploy_to_git:
    machine:
      image: ubuntu-1604:202010-01
    steps:
      - add_ssh_keys:
          fingerprints:
            - "31:de:e5:84:1b:12:81:94:aa:06:50:c0:cb:bd:79:f0"
      - checkout
      - run:
          name: Build shared library for Linux
          command: make release-build-linux
      - run:
          name: Build shared library for macOS
          command: make release-build-macos
      - run:
          name: Debug build results
          command: ls -l ./api
      - run:
          name: Configure git
          command: |
            git config user.email "bot@circleci.com"
            git config user.name "CircleCI Bot"
      - run:
          name: Check-in and push new libraries
          command: |
            git status
            git add ./api
            git commit --allow-empty -m '[skip ci] Built release libraries'
            git push origin $CIRCLE_BRANCH

  deploy_to_github_releases:
    machine:
      image: ubuntu-1604:202010-01
    steps:
      - checkout
      - run:
          name: Build static library for Alpine
          command: make release-build-alpine
      - run:
          name: Debug build results
          command: ls -l ./api
      - run:
          name: Install ghr
          command: |
            go get github.com/tcnksm/ghr
            ghr --version
      # TODO: deploy using ghr

workflows:
  version: 2
  build_and_test:
    jobs:
      - sanity
      - build_libwasmvm
      - test:
          requires:
            - build_libwasmvm
      # This is long running, so only double-check on merge commits
      # ensures that all code works on alpine linux
      - test_alpine_build:
          filters:
            tags:
              ignore:
                - /.*/
            branches:
              only:
                - master
      # Run only on master, not on tags (auto-build on merge PR)
      - deploy_to_git:
          requires:
            - sanity
            - test
          filters:
            tags:
              ignore:
                - /.*/
            branches:
              only:
                - master
      - deploy_to_github_releases:
          requires:
            - sanity
            - test
          # Use this tag filter when the CI job is finalized
          # filters:
          #   tags:
          #     only: /^v[0-9]+\.[0-9]+\.[0-9]+.*/
          #   branches:
          #     ignore: /.*/
